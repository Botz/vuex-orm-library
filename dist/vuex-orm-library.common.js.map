{"version":3,"sources":["webpack://vuex-orm-library/webpack/bootstrap","webpack://vuex-orm-library/./node_modules/core-js/library/modules/es6.symbol.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/es6.object.get-prototype-of.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_object-gopn-ext.js","webpack://vuex-orm-library/./node_modules/@babel/runtime-corejs2/core-js/object/get-prototype-of.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_has.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_to-absolute-index.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/es6.string.iterator.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_enum-bug-keys.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_to-primitive.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/es6.object.set-prototype-of.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_dom-create.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_to-object.js","webpack://vuex-orm-library/./node_modules/core-js/library/fn/object/set-prototype-of.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_defined.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_fails.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_iter-define.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_html.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_iobject.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_object-pie.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_hide.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_to-iobject.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_to-integer.js","webpack://vuex-orm-library/./node_modules/core-js/library/fn/object/define-property.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_set-to-string-tag.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/es6.object.define-property.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_enum-keys.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_iterators.js","webpack://vuex-orm-library/./node_modules/@babel/runtime-corejs2/core-js/object/create.js","webpack://vuex-orm-library/./node_modules/@babel/runtime-corejs2/core-js/object/set-prototype-of.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_iter-step.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_wks.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_object-gpo.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_shared-key.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_core.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_array-includes.js","webpack://vuex-orm-library/./node_modules/@babel/runtime-corejs2/core-js/symbol/iterator.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_uid.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_export.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_wks-define.js","webpack://vuex-orm-library/./node_modules/@babel/runtime-corejs2/core-js/symbol.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/es7.symbol.async-iterator.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_object-gopn.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_cof.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/web.dom.iterable.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_string-at.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/es7.symbol.observable.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_ie8-dom-define.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_a-function.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_object-dps.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_add-to-unscopables.js","webpack://vuex-orm-library/./node_modules/@babel/runtime-corejs2/core-js/object/define-property.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_descriptors.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_iter-create.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_is-array.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_redefine.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/es6.object.create.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_object-gops.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_object-create.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_property-desc.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_to-length.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_library.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_object-gopd.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/es6.array.iterator.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_object-keys.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_wks-ext.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_object-sap.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_ctx.js","webpack://vuex-orm-library/./node_modules/core-js/library/fn/symbol/iterator.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_object-dp.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_shared.js","webpack://vuex-orm-library/./node_modules/core-js/library/fn/object/create.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_an-object.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_global.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_object-keys-internal.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_set-proto.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_meta.js","webpack://vuex-orm-library/./node_modules/current-script-polyfill/currentScript.js","webpack://vuex-orm-library/./node_modules/core-js/library/modules/_is-object.js","webpack://vuex-orm-library/./node_modules/core-js/library/fn/symbol/index.js","webpack://vuex-orm-library/./node_modules/core-js/library/fn/object/get-prototype-of.js","webpack://vuex-orm-library/./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js","webpack://vuex-orm-library/./node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck.js","webpack://vuex-orm-library/./node_modules/@babel/runtime-corejs2/helpers/esm/createClass.js","webpack://vuex-orm-library/./node_modules/@babel/runtime-corejs2/helpers/esm/typeof.js","webpack://vuex-orm-library/./node_modules/@babel/runtime-corejs2/helpers/esm/assertThisInitialized.js","webpack://vuex-orm-library/./node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn.js","webpack://vuex-orm-library/./node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf.js","webpack://vuex-orm-library/./node_modules/@babel/runtime-corejs2/helpers/esm/setPrototypeOf.js","webpack://vuex-orm-library/./node_modules/@babel/runtime-corejs2/helpers/esm/inherits.js","webpack://vuex-orm-library/./node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js","webpack://vuex-orm-library/./node_modules/@vuex-orm/core/dist/vuex-orm.esm.js","webpack://vuex-orm-library/./src/Item.js","webpack://vuex-orm-library/./src/index.js","webpack://vuex-orm-library/./node_modules/@vue/cli-service/lib/commands/build/entry-lib-no-default.js"],"names":["Item","id","increment","Model"],"mappings":";;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;AClFa;AACb;AACA,aAAa,mBAAO,CAAC,MAAW;AAChC,UAAU,mBAAO,CAAC,MAAQ;AAC1B,kBAAkB,mBAAO,CAAC,MAAgB;AAC1C,cAAc,mBAAO,CAAC,MAAW;AACjC,eAAe,mBAAO,CAAC,MAAa;AACpC,WAAW,mBAAO,CAAC,MAAS;AAC5B,aAAa,mBAAO,CAAC,MAAU;AAC/B,aAAa,mBAAO,CAAC,MAAW;AAChC,qBAAqB,mBAAO,CAAC,MAAsB;AACnD,UAAU,mBAAO,CAAC,MAAQ;AAC1B,UAAU,mBAAO,CAAC,MAAQ;AAC1B,aAAa,mBAAO,CAAC,MAAY;AACjC,gBAAgB,mBAAO,CAAC,MAAe;AACvC,eAAe,mBAAO,CAAC,MAAc;AACrC,cAAc,mBAAO,CAAC,MAAa;AACnC,eAAe,mBAAO,CAAC,MAAc;AACrC,eAAe,mBAAO,CAAC,MAAc;AACrC,eAAe,mBAAO,CAAC,MAAc;AACrC,gBAAgB,mBAAO,CAAC,MAAe;AACvC,kBAAkB,mBAAO,CAAC,MAAiB;AAC3C,iBAAiB,mBAAO,CAAC,MAAkB;AAC3C,cAAc,mBAAO,CAAC,MAAkB;AACxC,cAAc,mBAAO,CAAC,MAAoB;AAC1C,YAAY,mBAAO,CAAC,MAAgB;AACpC,YAAY,mBAAO,CAAC,MAAgB;AACpC,UAAU,mBAAO,CAAC,MAAc;AAChC,YAAY,mBAAO,CAAC,MAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB;AACtB,sBAAsB,uBAAuB,WAAW,IAAI;AAC5D,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA,KAAK;AACL;AACA,sBAAsB,mCAAmC;AACzD,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,gCAAgC;AAChG;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,EAAE,mBAAO,CAAC,MAAgB;AAC1B,EAAE,mBAAO,CAAC,MAAe;AACzB;;AAEA,sBAAsB,mBAAO,CAAC,MAAY;AAC1C;AACA;;AAEA;AACA;AACA;AACA;;AAEA,0DAA0D,kBAAkB;;AAE5E;AACA;AACA;AACA,oBAAoB,uBAAuB;;AAE3C,oDAAoD,6BAA6B;;AAEjF;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH,0BAA0B,eAAe,EAAE;AAC3C,0BAA0B,gBAAgB;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,8CAA8C,YAAY,EAAE;;AAE5D;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,OAAO,QAAQ,iCAAiC;AACpG,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,oCAAoC,mBAAO,CAAC,MAAS;AACrD;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrPA;AACA,eAAe,mBAAO,CAAC,MAAc;AACrC,sBAAsB,mBAAO,CAAC,MAAe;;AAE7C,mBAAO,CAAC,MAAe;AACvB;AACA;AACA;AACA,CAAC;;;;;;;;ACRD;AACA,gBAAgB,mBAAO,CAAC,MAAe;AACvC,WAAW,mBAAO,CAAC,MAAgB;AACnC,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AClBA,iBAAiB,mBAAO,CAAC,MAA4C,E;;;;;;;ACArE,uBAAuB;AACvB;AACA;AACA;;;;;;;;ACHA,gBAAgB,mBAAO,CAAC,MAAe;AACvC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNa;AACb,UAAU,mBAAO,CAAC,MAAc;;AAEhC;AACA,mBAAO,CAAC,MAAgB;AACxB,6BAA6B;AAC7B,cAAc;AACd;AACA,CAAC;AACD;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,UAAU;AACV,CAAC;;;;;;;;AChBD;AACA;AACA;AACA;;;;;;;;ACHA;AACA,eAAe,mBAAO,CAAC,MAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACXA;AACA,cAAc,mBAAO,CAAC,MAAW;AACjC,8BAA8B,iBAAiB,mBAAO,CAAC,MAAc,OAAO;;;;;;;;ACF5E,eAAe,mBAAO,CAAC,MAAc;AACrC,eAAe,mBAAO,CAAC,MAAW;AAClC;AACA;AACA;AACA;AACA;;;;;;;;ACNA;AACA,cAAc,mBAAO,CAAC,MAAY;AAClC;AACA;AACA;;;;;;;;ACJA,mBAAO,CAAC,MAA2C;AACnD,iBAAiB,mBAAO,CAAC,MAAqB;;;;;;;;ACD9C;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;;;;;;;ACNa;AACb,cAAc,mBAAO,CAAC,MAAY;AAClC,cAAc,mBAAO,CAAC,MAAW;AACjC,eAAe,mBAAO,CAAC,MAAa;AACpC,WAAW,mBAAO,CAAC,MAAS;AAC5B,gBAAgB,mBAAO,CAAC,MAAc;AACtC,kBAAkB,mBAAO,CAAC,MAAgB;AAC1C,qBAAqB,mBAAO,CAAC,MAAsB;AACnD,qBAAqB,mBAAO,CAAC,MAAe;AAC5C,eAAe,mBAAO,CAAC,MAAQ;AAC/B,8CAA8C;AAC9C;AACA;AACA;;AAEA,8BAA8B,aAAa;;AAE3C;AACA;AACA;AACA;AACA;AACA,yCAAyC,oCAAoC;AAC7E,6CAA6C,oCAAoC;AACjF,KAAK,4BAA4B,oCAAoC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA,kCAAkC,2BAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACpEA,eAAe,mBAAO,CAAC,MAAW;AAClC;;;;;;;;ACDA;AACA,UAAU,mBAAO,CAAC,MAAQ;AAC1B;AACA;AACA;AACA;;;;;;;;ACLA,cAAc;;;;;;;;ACAd,SAAS,mBAAO,CAAC,MAAc;AAC/B,iBAAiB,mBAAO,CAAC,MAAkB;AAC3C,iBAAiB,mBAAO,CAAC,MAAgB;AACzC;AACA,CAAC;AACD;AACA;AACA;;;;;;;;ACPA;AACA,cAAc,mBAAO,CAAC,MAAY;AAClC,cAAc,mBAAO,CAAC,MAAY;AAClC;AACA;AACA;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACLA,mBAAO,CAAC,MAA0C;AAClD,cAAc,mBAAO,CAAC,MAAqB;AAC3C;AACA;AACA;;;;;;;;ACJA,UAAU,mBAAO,CAAC,MAAc;AAChC,UAAU,mBAAO,CAAC,MAAQ;AAC1B,UAAU,mBAAO,CAAC,MAAQ;;AAE1B;AACA,oEAAoE,iCAAiC;AACrG;;;;;;;;ACNA,cAAc,mBAAO,CAAC,MAAW;AACjC;AACA,iCAAiC,mBAAO,CAAC,MAAgB,cAAc,iBAAiB,mBAAO,CAAC,MAAc,KAAK;;;;;;;;ACFnH;AACA,cAAc,mBAAO,CAAC,MAAgB;AACtC,WAAW,mBAAO,CAAC,MAAgB;AACnC,UAAU,mBAAO,CAAC,MAAe;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;ACdA;;;;;;;;ACAA,iBAAiB,mBAAO,CAAC,MAAkC,E;;;;;;;ACA3D,iBAAiB,mBAAO,CAAC,MAA4C,E;;;;;;;ACArE;AACA,UAAU;AACV;;;;;;;;ACFA,YAAY,mBAAO,CAAC,MAAW;AAC/B,UAAU,mBAAO,CAAC,MAAQ;AAC1B,aAAa,mBAAO,CAAC,MAAW;AAChC;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;ACVA;AACA,UAAU,mBAAO,CAAC,MAAQ;AAC1B,eAAe,mBAAO,CAAC,MAAc;AACrC,eAAe,mBAAO,CAAC,MAAe;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;ACZA,aAAa,mBAAO,CAAC,MAAW;AAChC,UAAU,mBAAO,CAAC,MAAQ;AAC1B;AACA;AACA;;;;;;;;ACJA,6BAA6B;AAC7B,uCAAuC;;;;;;;;ACDvC;AACA;AACA,gBAAgB,mBAAO,CAAC,MAAe;AACvC,eAAe,mBAAO,CAAC,MAAc;AACrC,sBAAsB,mBAAO,CAAC,MAAsB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,YAAY,eAAe;AAChC;AACA,KAAK;AACL;AACA;;;;;;;;ACtBA,iBAAiB,mBAAO,CAAC,MAAoC,E;;;;;;;ACA7D;AACA;AACA;AACA;AACA;;;;;;;;ACJA,aAAa,mBAAO,CAAC,MAAW;AAChC,WAAW,mBAAO,CAAC,MAAS;AAC5B,UAAU,mBAAO,CAAC,MAAQ;AAC1B,WAAW,mBAAO,CAAC,MAAS;AAC5B,UAAU,mBAAO,CAAC,MAAQ;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA,kFAAkF;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,eAAe;AACf,eAAe;AACf,eAAe;AACf,gBAAgB;AAChB;;;;;;;;AC7DA,aAAa,mBAAO,CAAC,MAAW;AAChC,WAAW,mBAAO,CAAC,MAAS;AAC5B,cAAc,mBAAO,CAAC,MAAY;AAClC,aAAa,mBAAO,CAAC,MAAY;AACjC,qBAAqB,mBAAO,CAAC,MAAc;AAC3C;AACA,0DAA0D,sBAAsB;AAChF,kFAAkF,wBAAwB;AAC1G;;;;;;;;ACRA,iBAAiB,mBAAO,CAAC,MAA2B,E;;;;;;;ACApD,mBAAO,CAAC,MAAe;;;;;;;;ACAvB;AACA,YAAY,mBAAO,CAAC,MAAyB;AAC7C,iBAAiB,mBAAO,CAAC,MAAkB;;AAE3C;AACA;AACA;;;;;;;;ACNA,iBAAiB;;AAEjB;AACA;AACA;;;;;;;;ACJA,mBAAO,CAAC,MAAsB;AAC9B,aAAa,mBAAO,CAAC,MAAW;AAChC,WAAW,mBAAO,CAAC,MAAS;AAC5B,gBAAgB,mBAAO,CAAC,MAAc;AACtC,oBAAoB,mBAAO,CAAC,MAAQ;;AAEpC;AACA;AACA;AACA;AACA;;AAEA,eAAe,yBAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClBA,gBAAgB,mBAAO,CAAC,MAAe;AACvC,cAAc,mBAAO,CAAC,MAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA,mBAAO,CAAC,MAAe;;;;;;;;ACAvB,kBAAkB,mBAAO,CAAC,MAAgB,MAAM,mBAAO,CAAC,MAAU;AAClE,+BAA+B,mBAAO,CAAC,MAAe,gBAAgB,mBAAmB,UAAU,EAAE,EAAE;AACvG,CAAC;;;;;;;;ACFD;AACA;AACA;AACA;;;;;;;;ACHA,SAAS,mBAAO,CAAC,MAAc;AAC/B,eAAe,mBAAO,CAAC,MAAc;AACrC,cAAc,mBAAO,CAAC,MAAgB;;AAEtC,iBAAiB,mBAAO,CAAC,MAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACZA,8BAA8B;;;;;;;;ACA9B,iBAAiB,mBAAO,CAAC,MAA2C,E;;;;;;;ACApE;AACA,kBAAkB,mBAAO,CAAC,MAAU;AACpC,iCAAiC,QAAQ,mBAAmB,UAAU,EAAE,EAAE;AAC1E,CAAC;;;;;;;;;ACHY;AACb,aAAa,mBAAO,CAAC,MAAkB;AACvC,iBAAiB,mBAAO,CAAC,MAAkB;AAC3C,qBAAqB,mBAAO,CAAC,MAAsB;AACnD;;AAEA;AACA,mBAAO,CAAC,MAAS,qBAAqB,mBAAO,CAAC,MAAQ,4BAA4B,aAAa,EAAE;;AAEjG;AACA,qDAAqD,4BAA4B;AACjF;AACA;;;;;;;;ACZA;AACA,UAAU,mBAAO,CAAC,MAAQ;AAC1B;AACA;AACA;;;;;;;;ACJA,iBAAiB,mBAAO,CAAC,MAAS;;;;;;;;ACAlC,cAAc,mBAAO,CAAC,MAAW;AACjC;AACA,8BAA8B,SAAS,mBAAO,CAAC,MAAkB,GAAG;;;;;;;;ACFpE;;;;;;;;ACAA;AACA,eAAe,mBAAO,CAAC,MAAc;AACrC,UAAU,mBAAO,CAAC,MAAe;AACjC,kBAAkB,mBAAO,CAAC,MAAkB;AAC5C,eAAe,mBAAO,CAAC,MAAe;AACtC,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA,eAAe,mBAAO,CAAC,MAAe;AACtC;AACA;AACA;AACA;AACA;AACA,EAAE,mBAAO,CAAC,MAAS;AACnB,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA,gBAAgB,mBAAO,CAAC,MAAe;AACvC;AACA;AACA,2DAA2D;AAC3D;;;;;;;;ACLA;;;;;;;;ACAA,UAAU,mBAAO,CAAC,MAAe;AACjC,iBAAiB,mBAAO,CAAC,MAAkB;AAC3C,gBAAgB,mBAAO,CAAC,MAAe;AACvC,kBAAkB,mBAAO,CAAC,MAAiB;AAC3C,UAAU,mBAAO,CAAC,MAAQ;AAC1B,qBAAqB,mBAAO,CAAC,MAAmB;AAChD;;AAEA,YAAY,mBAAO,CAAC,MAAgB;AACpC;AACA;AACA;AACA;AACA,GAAG,YAAY;AACf;AACA;;;;;;;;;;;;;;;;ACfa;AACb,uBAAuB,mBAAO,CAAC,MAAuB;AACtD,WAAW,mBAAO,CAAC,MAAc;AACjC,gBAAgB,mBAAO,CAAC,MAAc;AACtC,gBAAgB,mBAAO,CAAC,MAAe;;AAEvC;AACA;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,MAAgB;AACzC,gCAAgC;AAChC,cAAc;AACd,iBAAiB;AACjB;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;;;;;;;;ACjCA;AACA,YAAY,mBAAO,CAAC,MAAyB;AAC7C,kBAAkB,mBAAO,CAAC,MAAkB;;AAE5C;AACA;AACA;;;;;;;;ACNA,YAAY,mBAAO,CAAC,MAAQ;;;;;;;;ACA5B;AACA,cAAc,mBAAO,CAAC,MAAW;AACjC,WAAW,mBAAO,CAAC,MAAS;AAC5B,YAAY,mBAAO,CAAC,MAAU;AAC9B;AACA,6BAA6B;AAC7B;AACA;AACA,qDAAqD,OAAO,EAAE;AAC9D;;;;;;;;ACTA;AACA,gBAAgB,mBAAO,CAAC,MAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnBA,mBAAO,CAAC,MAAmC;AAC3C,mBAAO,CAAC,MAAgC;AACxC,iBAAiB,mBAAO,CAAC,MAAwB;;;;;;;;ACFjD,eAAe,mBAAO,CAAC,MAAc;AACrC,qBAAqB,mBAAO,CAAC,MAAmB;AAChD,kBAAkB,mBAAO,CAAC,MAAiB;AAC3C;;AAEA,YAAY,mBAAO,CAAC,MAAgB;AACpC;AACA;AACA;AACA;AACA;AACA,GAAG,YAAY;AACf;AACA;AACA;AACA;;;;;;;;ACfA,WAAW,mBAAO,CAAC,MAAS;AAC5B,aAAa,mBAAO,CAAC,MAAW;AAChC;AACA,kDAAkD;;AAElD;AACA,qEAAqE;AACrE,CAAC;AACD;AACA,QAAQ,mBAAO,CAAC,MAAY;AAC5B;AACA,CAAC;;;;;;;;ACXD,mBAAO,CAAC,MAAiC;AACzC,cAAc,mBAAO,CAAC,MAAqB;AAC3C;AACA;AACA;;;;;;;;ACJA,eAAe,mBAAO,CAAC,MAAc;AACrC;AACA;AACA;AACA;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA,yCAAyC;;;;;;;;ACLzC,UAAU,mBAAO,CAAC,MAAQ;AAC1B,gBAAgB,mBAAO,CAAC,MAAe;AACvC,mBAAmB,mBAAO,CAAC,MAAmB;AAC9C,eAAe,mBAAO,CAAC,MAAe;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA,eAAe,mBAAO,CAAC,MAAc;AACrC,eAAe,mBAAO,CAAC,MAAc;AACrC;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA,cAAc,mBAAO,CAAC,MAAQ,iBAAiB,mBAAO,CAAC,MAAgB;AACvE;AACA;AACA,OAAO,YAAY,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,GAAG;AACR;AACA;;;;;;;;ACxBA,WAAW,mBAAO,CAAC,MAAQ;AAC3B,eAAe,mBAAO,CAAC,MAAc;AACrC,UAAU,mBAAO,CAAC,MAAQ;AAC1B,cAAc,mBAAO,CAAC,MAAc;AACpC;AACA;AACA;AACA;AACA,cAAc,mBAAO,CAAC,MAAU;AAChC,iDAAiD;AACjD,CAAC;AACD;AACA,qBAAqB;AACrB;AACA,SAAS;AACT,GAAG,EAAE;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpDA;;AAEA;;AAEA;AACA;AACA,wDAAwD;;AAExD;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,mBAAmB;AAChC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;;;;;;;;ACnCD;AACA;AACA;;;;;;;;ACFA,mBAAO,CAAC,MAA0B;AAClC,mBAAO,CAAC,MAAoC;AAC5C,mBAAO,CAAC,MAAyC;AACjD,mBAAO,CAAC,MAAqC;AAC7C,iBAAiB,mBAAO,CAAC,MAAqB;;;;;;;;ACJ9C,mBAAO,CAAC,MAA2C;AACnD,iBAAiB,mBAAO,CAAC,MAAqB;;;;;;;;;;;;ACD9C;;AAEA;AACA,MAAM,IAAuC;AAC7C,IAAI,mBAAO,CAAC,MAAyB;AACrC;;AAEA,MAAM,eAAC;AACP,OAAO,eAAC,sCAAsC,eAAC,GAAG,eAAC;AACnD,IAAI,qBAAuB,GAAG,eAAC;AAC/B;AACA;;AAEA;AACe,sDAAI;;;ACdJ;AACf;AACA;AACA;AACA,C;;;;;;ACJ0E;;AAE1E;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA,IAAI,yBAAsB;AAC1B;AACA;;AAEe;AACf;AACA;AACA;AACA,C;;;;;;;;;;ACjB6D;AAClB;;AAE3C,SAAS,cAAQ,OAAO,YAAY,gBAAO,0BAA0B,kBAAgB,gBAAgB,CAAC,cAAQ,2BAA2B,mBAAmB,GAAG,EAAE,OAAO,CAAC,cAAQ,2BAA2B,sBAAsB,gBAAO,uCAAuC,gBAAO,YAAY,gBAAO,mCAAmC,GAAG,EAAE,QAAQ,cAAQ,MAAM;;AAEzV,SAAS,aAAO;AAC/B,aAAa,gBAAO,mBAAmB,cAAQ,CAAC,kBAAgB;AAChE,IAAI,aAAO;AACX,aAAa,cAAQ;AACrB;AACA,GAAG;AACH,IAAI,aAAO;AACX,2BAA2B,gBAAO,uCAAuC,gBAAO,YAAY,gBAAO,wBAAwB,cAAQ;AACnI;AACA;;AAEA,SAAS,aAAO;AAChB,C;;ACjBe;AACf;AACA;AACA;;AAEA;AACA,C;;ACN+C;AACa;AAC7C;AACf,eAAe,aAAO;AACtB;AACA;;AAEA,SAAS,sBAAqB;AAC9B,C;;;;;;;;;;ACR2E;AACA;AAC5D,SAAS,6BAAe;AACvC,EAAE,6BAAe,GAAG,0BAAsB,GAAG,0BAAsB;AACnE,0BAA0B,0BAAsB;AAChD;AACA,SAAS,6BAAe;AACxB,C;;;;;;ACP2E;AAC5D;AACf,oBAAoB,0BAAsB;AAC1C;AACA;AACA;;AAEA;AACA,C;;ACRyD;AACX;AAC/B;AACf;AACA;AACA;;AAEA,uBAAuB,gBAAc;AACrC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,kBAAkB,eAAc;AAChC,C;;ACf0E;AAC3D;AACf;AACA,IAAI,yBAAsB;AAC1B;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA,C;;ACdA;AACA,kBAAkB,YAAY,EAAE;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,CAAC;;AAED;AACA,6BAA6B;AAC7B,uCAAuC;AACvC,CAAC;AACD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,QAAQ,mBAAmB,UAAU,EAAE,EAAE;AAC1E,CAAC;;AAED,IAAI,qBAAQ;AACZ;AACA,mBAAmB,qBAAQ,eAAe,qBAAQ;AAClD;AACA,cAAc,qBAAQ;AACtB;;AAEA;AACA,wDAAwD,mBAAmB,UAAU,EAAE,EAAE;AACzF,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,YAAY;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA,IAAI,2BAAc,KAAK;AACvB;AACA,SAAS,2BAAc;AACvB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oDAAoD;;AAEpD;AACA,qEAAqE;AACrE,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD,CAAC;;AAED;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD,CAAC;;AAED;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,wBAAwB;AAC7G,oEAAoE;AACpE,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,eAAe;AACf,eAAe;AACf,eAAe;AACf,gBAAgB;AAChB;;AAEA,IAAI,qBAAQ,KAAK;;AAEjB;AACA,SAAS,qBAAQ;AACjB;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,4DAA4D;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,YAAY,eAAe;AAChC;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;;;;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,UAAU,EAAE;AAChD,mBAAmB,sCAAsC;AACzD,CAAC,qCAAqC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;;;AAGA,0CAA0C,wBAAwB;;AAElE,IAAI,mBAAM;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB;;;;AAItB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK,YAAY;AACjB,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,+DAA+D;AAC/D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;;AAEA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;;AAEA;AACA;AACA,gDAAgD,OAAO;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;;AAEA;AACA,aAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,gBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,sBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kCAAkC,SAAS;AAC3C,kCAAkC,WAAW,UAAU;AACvD,yCAAyC,cAAc;AACvD;AACA,6GAA6G,OAAO,UAAU;AAC9H,gFAAgF,iBAAiB,OAAO;AACxG,wDAAwD,gBAAgB,QAAQ,OAAO;AACvF,8CAA8C,gBAAgB,gBAAgB,OAAO;AACrF;AACA,iCAAiC;AACjC;AACA;AACA,SAAS,YAAY,aAAa,OAAO,EAAE,UAAU,WAAW;AAChE,mCAAmC,SAAS;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,2CAA2C,EAAE;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,mBAAmB,EAAE;AACrE,gBAAgB;AAChB,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,IAAI,mBAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,sBAAsB,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACbb;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,oCAAoC,4BAA4B,sBAAsB,gBAAgB;AACxJ,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,gCAAgC,EAAE;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,qCAAqC,EAAE;AACpF,4EAA4E,wCAAwC,EAAE;AACtH;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,oCAAoC;AACtF;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,oCAAoC;AACtF;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACbmBAAmB,mBAAM;AACzqCAAqC,yCAAyC,EAAE;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,iCAAiC;AACrG;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,IAAI;AAC7B,+EAA+E,eAAe;AAC9F;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,SAAS,6BAAiB;AAC1B,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS,wBAAY;AACrB,kBAAkB,6BAAiB;AACnC,mBAAmB,6BAAiB;AACpC;AACA;;AAEA,SAAS,2BAAe;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,sBAAsB;AACvC;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,MAAM,2BAAe;AACrB,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,IAAI;AAChB,YAAY;AACZ;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,+BAA+B;AAC3C,YAAY,SAAS;AACrB,YAAY,SAAS;AACrB,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,KAAK;AACL;AACA;AACA,6BAA6B;AAC7B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,6BAA6B,oCAAoC;AACjE,KAAK,mBAAmB;AACxB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,EAAE,wBAAY;AACd;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,EAAE,wBAAY;AACd;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,qEAAqE,8BAA8B;AACnG,KAAK,IAAI;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,6BAA6B,8BAA8B;AAC3D,KAAK,IAAI;AACT;;AAEA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,gCAAgC;AAChC;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA,CAAC;;AAED;AACA,+BAA+B;;AAE/B;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA+B;;AAE/B;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,6BAA6B,oCAAoC;AACjE,KAAK,mBAAmB;AACxB;;AAEA;AACA,uEAAuE,aAAa;AACpF;AACA;;AAEA;AACA;;AAEA;AACA,0EAA0E,eAAe;AACzF;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,qCAAqC,EAAE;AACrG,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,WAAW,aAAa;AACzE;AACA,SAAS,IAAI;AACb;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,mCAAmC,EAAE;AACtF;AACA;AACA;AACA;AACA;AACA,uEAAuE,sBAAsB,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,oBAAoB,EAAE;AAC5E,4DAA4D,wBAAwB,EAAE;AACtF;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,oDAAoD,EAAE;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,2BAA2B,aAAa,GAAG;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvkCAAkC,iBAAiB;AACnD,+BAA+B,WAAW;AAC1C,oCAAoC,mBAAmB;AACvD;AACA,6BAA6B,0FAA0F;AACvH;AACA;AACA,yBAAyB,2FAA2F;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,0BAA0B,EAAE;AACrF;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,wCAAwC,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,gBAAgB;AACxD;AACA,wCAAwC,cAAc;AACtD;AACA,wCAAwC,eAAe;AACvD;AACA,wCAAwC,uBAAuB;AAC/D;AACA,wCAAwC,wBAAwB;AAChE;AACA,wCAAwC,gBAAgB;AACxD;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,cAAc;AAC5C;AACA;AACA;AACA;AACA;AACA,6BAA6B,2CAA2C;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,sBAAsB,EAAE;AAC7E;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,wBAAwB,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,6BAA6B,EAAE,0BAA0B,aAAa,EAAE,EAAE;AACnH;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAA6C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4CAA4C;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,8BAA8B,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,oCAAoC,EAAE;AACxG;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD,0BAA0B,qCAAqC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,SAAS;AACT,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA,qDAAqD;AACrD;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA,yDAAyD,sBAAsB,EAAE;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA,MAAM,EAAE;AACR;AACA;AACA;AACA,8DAA8D;AAC9D;AACA,MAAM,EAAE;AACR;AACA;AACA;AACA,+DAA+D;AAC/D;AACA,MAAM,EAAE;AACR;AACA;AACA;AACA,iEAAiE;AACjE;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,iBAAiB,GAAG,aAAa;AAC9F,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,YAAY,iBAAiB,IAAI,aAAa;AACxH,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,YAAY,iBAAiB,IAAI,aAAa;AACxH,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,gCAAgC,GAAG,aAAa;AACpH;AACA;AACA;AACA;AACA;AACA,oEAAoE,gCAAgC,GAAG,aAAa;AACpH;AACA;AACA,yEAAyE,iBAAiB,aAAa,aAAa;AACpH,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,iBAAiB,aAAa,aAAa;AAC5H,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,+BAA+B,GAAG,aAAa;AAC/G,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,iBAAiB,GAAG,aAAa;AACpG;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,MAAM,EAAE;AACR;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,MAAM,EAAE;AACR;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,MAAM,EAAE;AACR;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,SAAS;AAC/B,yCAAyC,YAAY,iBAAiB;AACtE;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS;AACnC,oDAAoD,YAAY,iBAAiB;AACjF;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS;AACnC,oDAAoD,YAAY,iBAAiB;AACjF;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS;AACnC,oDAAoD,YAAY,iBAAiB;AACjF;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS;AACnC,4DAA4D,YAAY,iBAAiB;AACzF;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS;AACnC,oDAAoD,YAAY,iBAAiB;AACjF;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,yBAAyB;AAC1E;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,UAAU,UAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,yBAAyB,EAAE;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,uFAAuF;AACvF;AACA,cAAc;AACd,oDAAoD;AACpD,oDAAoD;AACpD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4BAA4B,8CAA8C,EAAE;AACtG;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA,sDAAsD,YAAoB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mBAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,sDAAK,EAAC;AACuS;;;;;;;;;ACl8K5T;;IAEqBA,S;;;;;;;;;;;;;6BAGH;AACd,aAAM;AACJC,UAAE,EAAE,KAAKC;AADL,OAAN;AAGD;;;;EAP+BC,K;;gBAAbH,S,YACH,O;;;;ACHlB;;;ACAA;AAAwB;AACF","file":"vuex-orm-library.common.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"fae3\");\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar toObject = require('./_to-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $GOPS = require('./_object-gops');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  $GOPS.f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives\n// https://bugs.chromium.org/p/v8/issues/detail?id=3443\nvar FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });\n\n$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {\n  getOwnPropertySymbols: function getOwnPropertySymbols(it) {\n    return $GOPS.f(toObject(it));\n  }\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject = require('./_to-object');\nvar $getPrototypeOf = require('./_object-gpo');\n\nrequire('./_object-sap')('getPrototypeOf', function () {\n  return function getPrototypeOf(it) {\n    return $getPrototypeOf(toObject(it));\n  };\n});\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","module.exports = require(\"core-js/library/fn/object/get-prototype-of\");","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","require('../../modules/es6.object.set-prototype-of');\nmodule.exports = require('../../modules/_core').Object.setPrototypeOf;\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","exports.f = {}.propertyIsEnumerable;\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","require('../../modules/es6.object.define-property');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperty(it, key, desc) {\n  return $Object.defineProperty(it, key, desc);\n};\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","module.exports = {};\n","module.exports = require(\"core-js/library/fn/object/create\");","module.exports = require(\"core-js/library/fn/object/set-prototype-of\");","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","var core = module.exports = { version: '2.6.9' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","module.exports = require(\"core-js/library/fn/symbol/iterator\");","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar ctx = require('./_ctx');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && has(exports, key)) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","module.exports = require(\"core-js/library/fn/symbol\");","require('./_wks-define')('asyncIterator');\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","require('./es6.array.iterator');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar TO_STRING_TAG = require('./_wks')('toStringTag');\n\nvar DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +\n  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +\n  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +\n  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +\n  'TextTrackList,TouchList').split(',');\n\nfor (var i = 0; i < DOMIterables.length; i++) {\n  var NAME = DOMIterables[i];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","require('./_wks-define')('observable');\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","module.exports = function () { /* empty */ };\n","module.exports = require(\"core-js/library/fn/object/define-property\");","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","module.exports = require('./_hide');\n","var $export = require('./_export');\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: require('./_object-create') });\n","exports.f = Object.getOwnPropertySymbols;\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","module.exports = true;\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","exports.f = require('./_wks');\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","require('../../modules/es6.string.iterator');\nrequire('../../modules/web.dom.iterable');\nmodule.exports = require('../../modules/_wks-ext').f('iterator');\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n","require('../../modules/es6.object.create');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function create(P, D) {\n  return $Object.create(P, D);\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","// document.currentScript polyfill by Adam Miller\n\n// MIT license\n\n(function(document){\n  var currentScript = \"currentScript\",\n      scripts = document.getElementsByTagName('script'); // Live NodeList collection\n\n  // If browser needs currentScript polyfill, add get currentScript() to the document object\n  if (!(currentScript in document)) {\n    Object.defineProperty(document, currentScript, {\n      get: function(){\n\n        // IE 6-10 supports script readyState\n        // IE 10+ support stack trace\n        try { throw new Error(); }\n        catch (err) {\n\n          // Find the second match for the \"at\" string to get file src url from stack.\n          // Specifically works with the format of stack traces in IE.\n          var i, res = ((/.*at [^\\(]*\\((.*):.+:.+\\)$/ig).exec(err.stack) || [false])[1];\n\n          // For all scripts on the page, if src matches or if ready state is interactive, return the script tag\n          for(i in scripts){\n            if(scripts[i].src == res || scripts[i].readyState == \"interactive\"){\n              return scripts[i];\n            }\n          }\n\n          // If no match, return null\n          return null;\n        }\n      }\n    });\n  }\n})(document);\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","require('../../modules/es6.symbol');\nrequire('../../modules/es6.object.to-string');\nrequire('../../modules/es7.symbol.async-iterator');\nrequire('../../modules/es7.symbol.observable');\nmodule.exports = require('../../modules/_core').Symbol;\n","require('../../modules/es6.object.get-prototype-of');\nmodule.exports = require('../../modules/_core').Object.getPrototypeOf;\n","// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  if (process.env.NEED_CURRENTSCRIPT_POLYFILL) {\n    require('current-script-polyfill')\n  }\n\n  var i\n  if ((i = window.document.currentScript) && (i = i.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/))) {\n    __webpack_public_path__ = i[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\nexport default null\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import _Object$defineProperty from \"../../core-js/object/define-property\";\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n\n    _Object$defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import _Symbol$iterator from \"../../core-js/symbol/iterator\";\nimport _Symbol from \"../../core-js/symbol\";\n\nfunction _typeof2(obj) { if (typeof _Symbol === \"function\" && typeof _Symbol$iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof _Symbol === \"function\" && obj.constructor === _Symbol && obj !== _Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nexport default function _typeof(obj) {\n  if (typeof _Symbol === \"function\" && _typeof2(_Symbol$iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof _Symbol === \"function\" && obj.constructor === _Symbol && obj !== _Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","import _Object$getPrototypeOf from \"../../core-js/object/get-prototype-of\";\nimport _Object$setPrototypeOf from \"../../core-js/object/set-prototype-of\";\nexport default function _getPrototypeOf(o) {\n  _getPrototypeOf = _Object$setPrototypeOf ? _Object$getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || _Object$getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import _Object$setPrototypeOf from \"../../core-js/object/set-prototype-of\";\nexport default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = _Object$setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import _Object$create from \"../../core-js/object/create\";\nimport setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = _Object$create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import _Object$defineProperty from \"../../core-js/object/define-property\";\nexport default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    _Object$defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","function createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar _global = createCommonjsModule(function (module) {\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n});\n\nvar _core = createCommonjsModule(function (module) {\nvar core = module.exports = { version: '2.6.9' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n});\nvar _core_1 = _core.version;\n\nvar _isObject = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\nvar _anObject = function (it) {\n  if (!_isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\nvar _fails = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n// Thank's IE8 for his funny defineProperty\nvar _descriptors = !_fails(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\nvar document = _global.document;\n// typeof document.createElement is 'object' in old IE\nvar is = _isObject(document) && _isObject(document.createElement);\nvar _domCreate = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\nvar _ie8DomDefine = !_descriptors && !_fails(function () {\n  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n// 7.1.1 ToPrimitive(input [, PreferredType])\n\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nvar _toPrimitive = function (it, S) {\n  if (!_isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\nvar dP = Object.defineProperty;\n\nvar f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  _anObject(O);\n  P = _toPrimitive(P, true);\n  _anObject(Attributes);\n  if (_ie8DomDefine) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\nvar _objectDp = {\n\tf: f\n};\n\nvar _propertyDesc = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\nvar _hide = _descriptors ? function (object, key, value) {\n  return _objectDp.f(object, key, _propertyDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\nvar hasOwnProperty = {}.hasOwnProperty;\nvar _has = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\nvar id = 0;\nvar px = Math.random();\nvar _uid = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\nvar _shared = createCommonjsModule(function (module) {\nvar SHARED = '__core-js_shared__';\nvar store = _global[SHARED] || (_global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: _core.version,\n  mode:  'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n});\n\nvar _functionToString = _shared('native-function-to-string', Function.toString);\n\nvar _redefine = createCommonjsModule(function (module) {\nvar SRC = _uid('src');\n\nvar TO_STRING = 'toString';\nvar TPL = ('' + _functionToString).split(TO_STRING);\n\n_core.inspectSource = function (it) {\n  return _functionToString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) _has(val, 'name') || _hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === _global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    _hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    _hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || _functionToString.call(this);\n});\n});\n\nvar _aFunction = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n// optional / simple context binding\n\nvar _ctx = function (fn, that, length) {\n  _aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;\n    // extend global\n    if (target) _redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) _hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\n_global.core = _core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nvar _export = $export;\n\nvar toString = {}.toString;\n\nvar _cof = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\n\n// eslint-disable-next-line no-prototype-builtins\nvar _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return _cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n// 7.2.1 RequireObjectCoercible(argument)\nvar _defined = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n// to indexed object, toObject with fallback for non-array-like ES3 strings\n\n\nvar _toIobject = function (it) {\n  return _iobject(_defined(it));\n};\n\n// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nvar _toInteger = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n// 7.1.15 ToLength\n\nvar min = Math.min;\nvar _toLength = function (it) {\n  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\nvar max = Math.max;\nvar min$1 = Math.min;\nvar _toAbsoluteIndex = function (index, length) {\n  index = _toInteger(index);\n  return index < 0 ? max(index + length, 0) : min$1(index, length);\n};\n\n// false -> Array#indexOf\n// true  -> Array#includes\n\n\n\nvar _arrayIncludes = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = _toIobject($this);\n    var length = _toLength(O.length);\n    var index = _toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nvar _wks = createCommonjsModule(function (module) {\nvar store = _shared('wks');\n\nvar Symbol = _global.Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n});\n\n// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = _wks('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) _hide(ArrayProto, UNSCOPABLES, {});\nvar _addToUnscopables = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n\n// https://github.com/tc39/Array.prototype.includes\n\nvar $includes = _arrayIncludes(true);\n\n_export(_export.P, 'Array', {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n_addToUnscopables('includes');\n\nvar includes = _core.Array.includes;\n\nvar shared = _shared('keys');\n\nvar _sharedKey = function (key) {\n  return shared[key] || (shared[key] = _uid(key));\n};\n\nvar arrayIndexOf = _arrayIncludes(false);\nvar IE_PROTO = _sharedKey('IE_PROTO');\n\nvar _objectKeysInternal = function (object, names) {\n  var O = _toIobject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (_has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n// IE 8- don't enum bug keys\nvar _enumBugKeys = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\n\n\n\nvar _objectKeys = Object.keys || function keys(O) {\n  return _objectKeysInternal(O, _enumBugKeys);\n};\n\nvar f$1 = Object.getOwnPropertySymbols;\n\nvar _objectGops = {\n\tf: f$1\n};\n\nvar f$2 = {}.propertyIsEnumerable;\n\nvar _objectPie = {\n\tf: f$2\n};\n\n// 7.1.13 ToObject(argument)\n\nvar _toObject = function (it) {\n  return Object(_defined(it));\n};\n\n// 19.1.2.1 Object.assign(target, source, ...)\n\n\n\n\n\n\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nvar _objectAssign = !$assign || _fails(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = _toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = _objectGops.f;\n  var isEnum = _objectPie.f;\n  while (aLen > index) {\n    var S = _iobject(arguments[index++]);\n    var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) {\n      key = keys[j++];\n      if (!_descriptors || isEnum.call(S, key)) T[key] = S[key];\n    }\n  } return T;\n} : $assign;\n\n// 19.1.3.1 Object.assign(target, source)\n\n\n_export(_export.S + _export.F, 'Object', { assign: _objectAssign });\n\nvar assign = _core.Object.assign;\n\nvar isEnum = _objectPie.f;\nvar _objectToArray = function (isEntries) {\n  return function (it) {\n    var O = _toIobject(it);\n    var keys = _objectKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!_descriptors || isEnum.call(O, key)) {\n        result.push(isEntries ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n\n// https://github.com/tc39/proposal-object-values-entries\n\nvar $entries = _objectToArray(true);\n\n_export(_export.S, 'Object', {\n  entries: function entries(it) {\n    return $entries(it);\n  }\n});\n\nvar entries = _core.Object.entries;\n\n// https://github.com/tc39/proposal-object-values-entries\n\nvar $values = _objectToArray(false);\n\n_export(_export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n\nvar values = _core.Object.values;\n\n// 7.2.8 IsRegExp(argument)\n\n\nvar MATCH = _wks('match');\nvar _isRegexp = function (it) {\n  var isRegExp;\n  return _isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : _cof(it) == 'RegExp');\n};\n\n// helper for String#{startsWith, endsWith, includes}\n\n\n\nvar _stringContext = function (that, searchString, NAME) {\n  if (_isRegexp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(_defined(that));\n};\n\nvar MATCH$1 = _wks('match');\nvar _failsIsRegexp = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH$1] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n_export(_export.P + _export.F * _failsIsRegexp(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = _stringContext(this, searchString, STARTS_WITH);\n    var index = _toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n\nvar startsWith = _core.String.startsWith;\n\nvar Container = /** @class */ (function () {\n    function Container() {\n    }\n    /**\n     * Register the database.\n     */\n    Container.register = function (database) {\n        this.database = database;\n    };\n    return Container;\n}());\n\nvar install = (function (database, options) {\n    if (options === void 0) { options = {}; }\n    var namespace = options.namespace || 'entities';\n    return function (store) {\n        Container.register(database);\n        database.start(store, namespace);\n    };\n});\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\n\n/**\n * Check if the given array or object is empty.\n */\nfunction isEmpty(data) {\n    if (Array.isArray(data)) {\n        return data.length === 0;\n    }\n    return Object.keys(data).length === 0;\n}\n/**\n * Iterates over own enumerable string keyed properties of an object and\n * invokes `iteratee` for each property.\n */\nfunction forOwn(object, iteratee) {\n    Object.keys(object).forEach(function (key) { return iteratee(object[key], key, object); });\n}\n/**\n * Create an array from the object.\n */\nfunction map(object, iteratee) {\n    return Object.keys(object).map(function (key) {\n        return iteratee(object[key], key, object);\n    });\n}\n/**\n * Creates an object with the same keys as object and values generated by\n * running each own enumerable string keyed property of object thru\n * iteratee. The iteratee is invoked with three arguments:\n * (value, key, object).\n */\nfunction mapValues(object, iteratee) {\n    var newObject = Object.assign({}, object);\n    return Object.keys(object).reduce(function (records, key) {\n        records[key] = iteratee(object[key], key, object);\n        return records;\n    }, newObject);\n}\n/**\n * Creates an object composed of the object properties predicate returns\n * truthy for. The predicate is invoked with two arguments: (value, key).\n */\nfunction pickBy(object, predicate) {\n    return Object.keys(object).reduce(function (records, key) {\n        var value = object[key];\n        if (predicate(value, key)) {\n            records[key] = value;\n        }\n        return records;\n    }, {});\n}\n/**\n * Creates an array of elements, sorted in specified order by the results\n * of running each element in a collection thru each iteratee.\n */\nfunction orderBy(collection, keys, directions) {\n    var index = -1;\n    var result = collection.map(function (value) {\n        var criteria = keys.map(function (key) { return value[key]; });\n        return { criteria: criteria, index: ++index, value: value };\n    });\n    return baseSortBy(result, function (object, other) {\n        return compareMultiple(object, other, directions);\n    });\n}\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of collection thru iteratee.\n */\nfunction groupBy(collection, iteratee) {\n    return collection.reduce(function (records, record) {\n        var key = iteratee(record);\n        if (records[key] === undefined) {\n            records[key] = [];\n        }\n        records[key].push(record);\n        return records;\n    }, {});\n}\n/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their\n * corresponding values.\n */\nfunction baseSortBy(array, comparer) {\n    var length = array.length;\n    array.sort(comparer);\n    while (length--) {\n        array[length] = array[length].value;\n    }\n    return array;\n}\n/**\n * Used by `orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order.\n * Otherwise, specify an order of \"desc\" for descending or \"asc\" for\n * ascending sort order of corresponding values.\n */\nfunction compareMultiple(object, other, orders) {\n    var objCriteria = object.criteria;\n    var othCriteria = other.criteria;\n    var length = objCriteria.length;\n    var ordersLength = orders.length;\n    var index = -1;\n    while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n            if (index >= ordersLength) {\n                return result;\n            }\n            var order = orders[index];\n            return result * (order === 'desc' ? -1 : 1);\n        }\n    }\n    return object.index - other.index;\n}\n/**\n * Compares values to sort them in ascending order.\n */\nfunction compareAscending(value, other) {\n    if (value !== other) {\n        if (value > other) {\n            return 1;\n        }\n        if (value < other) {\n            return -1;\n        }\n    }\n    return 0;\n}\nvar Utils = {\n    isEmpty: isEmpty,\n    forOwn: forOwn,\n    groupBy: groupBy,\n    map: map,\n    mapValues: mapValues,\n    orderBy: orderBy,\n    pickBy: pickBy\n};\n\nvar Attribute = /** @class */ (function () {\n    /**\n     * Create a new attribute instance.\n     */\n    function Attribute(model) {\n        this.model = model;\n    }\n    return Attribute;\n}());\n\nvar Type = /** @class */ (function (_super) {\n    __extends(Type, _super);\n    /**\n     * Create a new type instance.\n     */\n    function Type(model, value, mutator) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        /**\n         * Whether if the attribute can accept `null` as a value.\n         */\n        _this.isNullable = false;\n        _this.value = value;\n        _this.mutator = mutator;\n        return _this;\n    }\n    /**\n     * Set `isNullable` to be `true`.\n     */\n    Type.prototype.nullable = function () {\n        this.isNullable = true;\n        return this;\n    };\n    /**\n     * Mutate the given value by mutator.\n     */\n    Type.prototype.mutate = function (value, key) {\n        var mutator = this.mutator || this.model.mutators()[key];\n        return mutator ? mutator(value) : value;\n    };\n    return Type;\n}(Attribute));\n\nvar Attr = /** @class */ (function (_super) {\n    __extends(Attr, _super);\n    /**\n     * Create a new attr instance.\n     */\n    function Attr(model, value, mutator) {\n        var _this = _super.call(this, model, value, mutator) /* istanbul ignore next */ || this;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * Make value to be set to model property. This method is used when\n     * instantiating a model or creating a plain object from a model.\n     */\n    Attr.prototype.make = function (value, _parent, key) {\n        value = value !== undefined ? value : this.value;\n        // Default Value might be a function (taking no parameter)\n        var localValue = value;\n        if (typeof value === 'function') {\n            localValue = value();\n        }\n        return this.mutate(localValue, key);\n    };\n    return Attr;\n}(Type));\n\nvar Increment = /** @class */ (function (_super) {\n    __extends(Increment, _super);\n    /**\n     * Create a new increment instance.\n     */\n    function Increment(model) {\n        /* istanbul ignore next */\n        return _super.call(this, model, null) || this;\n    }\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    Increment.prototype.make = function (value, _parent, _key) {\n        return typeof value === 'number' ? value : null;\n    };\n    return Increment;\n}(Type));\n\nvar String$1 = /** @class */ (function (_super) {\n    __extends(String, _super);\n    /**\n     * Create a new string instance.\n     */\n    function String(model, value, mutator) {\n        /* istanbul ignore next */\n        return _super.call(this, model, value, mutator) || this;\n    }\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    String.prototype.make = function (value, _parent, key) {\n        return this.mutate(this.fix(value), key);\n    };\n    /**\n     * Convert given value to the string.\n     */\n    String.prototype.fix = function (value) {\n        if (value === undefined) {\n            return this.value;\n        }\n        if (typeof value === 'string') {\n            return value;\n        }\n        if (value === null && this.isNullable) {\n            return value;\n        }\n        return value + '';\n    };\n    return String;\n}(Type));\n\nvar Number = /** @class */ (function (_super) {\n    __extends(Number, _super);\n    /**\n     * Create a new number instance.\n     */\n    function Number(model, value, mutator) {\n        /* istanbul ignore next */\n        return _super.call(this, model, value, mutator) || this;\n    }\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    Number.prototype.make = function (value, _parent, key) {\n        return this.mutate(this.fix(value), key);\n    };\n    /**\n     * Transform given data to the number.\n     */\n    Number.prototype.fix = function (value) {\n        if (value === undefined) {\n            return this.value;\n        }\n        if (typeof value === 'number') {\n            return value;\n        }\n        if (typeof value === 'string') {\n            return parseFloat(value);\n        }\n        if (typeof value === 'boolean') {\n            return value ? 1 : 0;\n        }\n        if (value === null && this.isNullable) {\n            return value;\n        }\n        return 0;\n    };\n    return Number;\n}(Type));\n\nvar Boolean = /** @class */ (function (_super) {\n    __extends(Boolean, _super);\n    /**\n     * Create a new number instance.\n     */\n    function Boolean(model, value, mutator) {\n        /* istanbul ignore next */\n        return _super.call(this, model, value, mutator) || this;\n    }\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    Boolean.prototype.make = function (value, _parent, key) {\n        return this.mutate(this.fix(value), key);\n    };\n    /**\n     * Transform given data to the boolean.\n     */\n    Boolean.prototype.fix = function (value) {\n        if (value === undefined) {\n            return this.value;\n        }\n        if (typeof value === 'boolean') {\n            return value;\n        }\n        if (typeof value === 'string') {\n            if (value.length === 0) {\n                return false;\n            }\n            var int = parseInt(value, 0);\n            return isNaN(int) ? true : !!int;\n        }\n        if (typeof value === 'number') {\n            return !!value;\n        }\n        if (value === null && this.isNullable) {\n            return value;\n        }\n        return false;\n    };\n    return Boolean;\n}(Type));\n\nvar Relation = /** @class */ (function (_super) {\n    __extends(Relation, _super);\n    function Relation() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Get relation query instance with constraint attached.\n     */\n    Relation.prototype.getRelation = function (query, name, constraints) {\n        var relation = query.newQuery(name);\n        constraints.forEach(function (constraint) { constraint(relation); });\n        return relation;\n    };\n    /**\n     * Get specified keys from the given collection.\n     */\n    Relation.prototype.getKeys = function (collection, key) {\n        return collection.reduce(function (models, model) {\n            if (model[key] === null || model[key] === undefined) {\n                return models;\n            }\n            models.push(model[key]);\n            return models;\n        }, []);\n    };\n    /**\n     * Create a new indexed map for the single relation by specified key.\n     */\n    Relation.prototype.mapSingleRelations = function (collection, key) {\n        return collection.reduce(function (records, record) {\n            var id = record[key];\n            records[id] = record;\n            return records;\n        }, {});\n    };\n    /**\n     * Create a new indexed map for the many relation by specified key.\n     */\n    Relation.prototype.mapManyRelations = function (collection, key) {\n        return collection.reduce(function (records, record) {\n            var id = record[key];\n            if (!records[id]) {\n                records[id] = [];\n            }\n            records[id].push(record);\n            return records;\n        }, {});\n    };\n    /**\n     * Check if the given value is a single relation, which is the Object.\n     */\n    Relation.prototype.isOneRelation = function (record) {\n        if (!Array.isArray(record) && record !== null && typeof record === 'object') {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Check if the given value is a single relation, which is the Object.\n     */\n    Relation.prototype.isManyRelation = function (records) {\n        if (!Array.isArray(records)) {\n            return false;\n        }\n        if (records.length < 1) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Convert given records to the collection.\n     */\n    Relation.prototype.makeManyRelation = function (records, model) {\n        var _this = this;\n        if (!this.isManyRelation(records)) {\n            return [];\n        }\n        return records.filter(function (record) {\n            return _this.isOneRelation(record);\n        }).map(function (record) {\n            return new model(record);\n        });\n    };\n    return Relation;\n}(Attribute));\n\nvar HasOne = /** @class */ (function (_super) {\n    __extends(HasOne, _super);\n    /**\n     * Create a new has one instance.\n     */\n    function HasOne(model, related, foreignKey, localKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.related = _this.model.relation(related);\n        _this.foreignKey = foreignKey;\n        _this.localKey = localKey;\n        return _this;\n    }\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    HasOne.prototype.define = function (schema) {\n        return schema.one(this.related);\n    };\n    /**\n     * Attach the relational key to the related data. For example,\n     * when User has one Phone, it will attach value to the\n     * `user_id` field of Phone record.\n     */\n    HasOne.prototype.attach = function (key, record, data) {\n        // Get related record.\n        var related = data[this.related.entity];\n        // If there's no related record, there's nothing we can do so return here.\n        if (!related || !related[key]) {\n            return;\n        }\n        // If there is a related record, check if the related record already has\n        // proper foreign key value. If it has, that means the user has provided\n        // the foreign key themselves so leave it alone and do nothing.\n        if (related[key][this.foreignKey] !== undefined) {\n            return;\n        }\n        // Check if the record has local key set. If not, set the local key to be\n        // the id value. This happens if the user defines the custom local key\n        // and didn't include it in the data being normalized.\n        if (!record[this.localKey]) {\n            record[this.localKey] = record.$id;\n        }\n        // Finally, set the foreign key of the related record to be the local\n        // key of this record.\n        related[key][this.foreignKey] = record[this.localKey];\n    };\n    /**\n     * Make value to be set to model property. This method is used when\n     * instantiating a model or creating a plain object from a model.\n     */\n    HasOne.prototype.make = function (value, _parent, _key) {\n        if (!this.isOneRelation(value)) {\n            return null;\n        }\n        return new this.related(value);\n    };\n    /**\n     * Load the has one relationship for the collection.\n     */\n    HasOne.prototype.load = function (query, collection, name, constraints) {\n        var relation = this.getRelation(query, this.related.entity, constraints);\n        this.addEagerConstraints(relation, collection);\n        this.match(collection, relation.get(), name);\n    };\n    /**\n     * Set the constraints for an eager load of the relation.\n     */\n    HasOne.prototype.addEagerConstraints = function (relation, collection) {\n        relation.whereFk(this.foreignKey, this.getKeys(collection, this.localKey));\n    };\n    /**\n     * Match the eagerly loaded results to their parents.\n     */\n    HasOne.prototype.match = function (collection, relations, name) {\n        var _this = this;\n        var dictionary = this.buildDictionary(relations);\n        collection.forEach(function (model) {\n            var id = model[_this.localKey];\n            var relation = dictionary[id];\n            model[name] = relation || null;\n        });\n    };\n    /**\n     * Build model dictionary keyed by the relation's foreign key.\n     */\n    HasOne.prototype.buildDictionary = function (relations) {\n        var _this = this;\n        return relations.reduce(function (dictionary, relation) {\n            var key = relation[_this.foreignKey];\n            dictionary[key] = relation;\n            return dictionary;\n        }, {});\n    };\n    return HasOne;\n}(Relation));\n\nvar BelongsTo = /** @class */ (function (_super) {\n    __extends(BelongsTo, _super);\n    /**\n     * Create a new belongs to instance.\n     */\n    function BelongsTo(model, parent, foreignKey, ownerKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.parent = _this.model.relation(parent);\n        _this.foreignKey = foreignKey;\n        _this.ownerKey = ownerKey;\n        return _this;\n    }\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    BelongsTo.prototype.define = function (schema) {\n        return schema.one(this.parent);\n    };\n    /**\n     * Attach the relational key to the given data. For example,\n     * when Post belongs to User, it will attach value to the\n     * `user_id` field of Post record.\n     */\n    BelongsTo.prototype.attach = function (key, record, _data) {\n        // See if the record has the foreign key, if yes, it means the user has\n        // provided the key explicitly so do nothing and return.\n        if (record[this.foreignKey] !== undefined) {\n            return;\n        }\n        // If there is no foreign key, let's set it here.\n        record[this.foreignKey] = key;\n    };\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    BelongsTo.prototype.make = function (value, _parent, _key) {\n        if (!this.isOneRelation(value)) {\n            return null;\n        }\n        return new this.parent(value);\n    };\n    /**\n     * Load the belongs to relationship for the collection.\n     */\n    BelongsTo.prototype.load = function (query, collection, name, constraints) {\n        var relation = this.getRelation(query, this.parent.entity, constraints);\n        this.addEagerConstraints(relation, collection);\n        this.match(collection, relation.get(), name);\n    };\n    /**\n     * Set the constraints for an eager load of the relation.\n     */\n    BelongsTo.prototype.addEagerConstraints = function (relation, collection) {\n        relation.whereFk(this.ownerKey, this.getKeys(collection, this.foreignKey));\n    };\n    /**\n     * Match the eagerly loaded results to their parents.\n     */\n    BelongsTo.prototype.match = function (collection, relations, name) {\n        var _this = this;\n        var dictionary = this.buildDictionary(relations);\n        collection.forEach(function (model) {\n            var id = model[_this.foreignKey];\n            var relation = id !== null ? dictionary[id] : null;\n            model[name] = relation || null;\n        });\n    };\n    /**\n     * Build model dictionary keyed by the relation's foreign key.\n     */\n    BelongsTo.prototype.buildDictionary = function (relations) {\n        var _this = this;\n        return relations.reduce(function (dictionary, relation) {\n            var key = relation[_this.ownerKey];\n            dictionary[key] = relation;\n            return dictionary;\n        }, {});\n    };\n    return BelongsTo;\n}(Relation));\n\nvar HasMany = /** @class */ (function (_super) {\n    __extends(HasMany, _super);\n    /**\n     * Create a new has many instance.\n     */\n    function HasMany(model, related, foreignKey, localKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.related = _this.model.relation(related);\n        _this.foreignKey = foreignKey;\n        _this.localKey = localKey;\n        return _this;\n    }\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    HasMany.prototype.define = function (schema) {\n        return schema.many(this.related);\n    };\n    /**\n     * Attach the relational key to the given data.\n     */\n    HasMany.prototype.attach = function (key, record, data) {\n        var _this = this;\n        if (!Array.isArray(key)) {\n            return;\n        }\n        key.forEach(function (index) {\n            var related = data[_this.related.entity];\n            if (!related || !related[index] || related[index][_this.foreignKey] !== undefined) {\n                return;\n            }\n            related[index][_this.foreignKey] = record[_this.localKey];\n        });\n    };\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    HasMany.prototype.make = function (value, _parent, _key) {\n        return this.makeManyRelation(value, this.related);\n    };\n    /**\n     * Load the has many relationship for the collection.\n     */\n    HasMany.prototype.load = function (query, collection, name, constraints) {\n        var relation = this.getRelation(query, this.related.entity, constraints);\n        this.addEagerConstraints(relation, collection);\n        this.match(collection, relation.get(), name);\n    };\n    /**\n     * Set the constraints for an eager load of the relation.\n     */\n    HasMany.prototype.addEagerConstraints = function (relation, collection) {\n        relation.whereFk(this.foreignKey, this.getKeys(collection, this.localKey));\n    };\n    /**\n     * Match the eagerly loaded results to their parents.\n     */\n    HasMany.prototype.match = function (collection, relations, name) {\n        var _this = this;\n        var dictionary = this.buildDictionary(relations);\n        collection.forEach(function (model) {\n            var id = model[_this.localKey];\n            var relation = dictionary[id];\n            model[name] = relation || [];\n        });\n    };\n    /**\n     * Build model dictionary keyed by the relation's foreign key.\n     */\n    HasMany.prototype.buildDictionary = function (relations) {\n        var _this = this;\n        return relations.reduce(function (dictionary, relation) {\n            var key = relation[_this.foreignKey];\n            if (!dictionary[key]) {\n                dictionary[key] = [];\n            }\n            dictionary[key].push(relation);\n            return dictionary;\n        }, {});\n    };\n    return HasMany;\n}(Relation));\n\nvar HasManyBy = /** @class */ (function (_super) {\n    __extends(HasManyBy, _super);\n    /**\n     * Create a new has many by instance.\n     */\n    function HasManyBy(model, parent, foreignKey, ownerKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.parent = _this.model.relation(parent);\n        _this.foreignKey = foreignKey;\n        _this.ownerKey = ownerKey;\n        return _this;\n    }\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    HasManyBy.prototype.define = function (schema) {\n        return schema.many(this.parent);\n    };\n    /**\n     * Attach the relational key to the given data.\n     */\n    HasManyBy.prototype.attach = function (key, record, _data) {\n        if (key.length === 0) {\n            return;\n        }\n        if (record[this.foreignKey] !== undefined) {\n            return;\n        }\n        record[this.foreignKey] = key;\n    };\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    HasManyBy.prototype.make = function (value, _parent, _key) {\n        return this.makeManyRelation(value, this.parent);\n    };\n    /**\n     * Load the has many by relationship for the collection.\n     */\n    HasManyBy.prototype.load = function (query, collection, name, constraints) {\n        var _this = this;\n        var relatedQuery = this.getRelation(query, this.parent.entity, constraints);\n        this.addConstraintForHasManyBy(relatedQuery, collection);\n        var relations = this.mapSingleRelations(relatedQuery.get(), this.ownerKey);\n        collection.forEach(function (item) {\n            var related = _this.getRelatedRecords(relations, item[_this.foreignKey]);\n            item[name] = related;\n        });\n    };\n    /**\n     * Set the constraints for an eager load of the relation.\n     */\n    HasManyBy.prototype.addConstraintForHasManyBy = function (query, collection) {\n        var _this = this;\n        var keys = collection.reduce(function (keys, item) {\n            return keys.concat(item[_this.foreignKey]);\n        }, []);\n        query.where(this.ownerKey, keys);\n    };\n    /**\n     * Get related records.\n     */\n    HasManyBy.prototype.getRelatedRecords = function (records, keys) {\n        return keys.reduce(function (items, id) {\n            var related = records[id];\n            related && items.push(related);\n            return items;\n        }, []);\n    };\n    return HasManyBy;\n}(Relation));\n\nvar HasManyThrough = /** @class */ (function (_super) {\n    __extends(HasManyThrough, _super);\n    /**\n     * Create a new has many through instance.\n     */\n    function HasManyThrough(model, related, through, firstKey, secondKey, localKey, secondLocalKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.related = _this.model.relation(related);\n        _this.through = _this.model.relation(through);\n        _this.firstKey = firstKey;\n        _this.secondKey = secondKey;\n        _this.localKey = localKey;\n        _this.secondLocalKey = secondLocalKey;\n        return _this;\n    }\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    HasManyThrough.prototype.define = function (schema) {\n        return schema.many(this.related);\n    };\n    /**\n     * Attach the relational key to the given data. Since has many through\n     * relationship doesn't have any foreign key, it would do nothing.\n     */\n    HasManyThrough.prototype.attach = function (_key, _record, _data) {\n        return;\n    };\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    HasManyThrough.prototype.make = function (value, _parent, _key) {\n        return this.makeManyRelation(value, this.related);\n    };\n    /**\n     * Load the has many through relationship for the collection.\n     */\n    HasManyThrough.prototype.load = function (query, collection, name, constraints) {\n        var _this = this;\n        var relatedQuery = this.getRelation(query, this.related.entity, constraints);\n        var throughQuery = query.newQuery(this.through.entity);\n        this.addEagerConstraintForThrough(throughQuery, collection);\n        var throughs = throughQuery.get();\n        this.addEagerConstraintForRelated(relatedQuery, throughs);\n        var relateds = this.mapThroughRelations(throughs, relatedQuery);\n        collection.forEach(function (item) {\n            var related = relateds[item[_this.localKey]];\n            item[name] = related || [];\n        });\n    };\n    /**\n     * Set the constraints for the through relation.\n     */\n    HasManyThrough.prototype.addEagerConstraintForThrough = function (query, collection) {\n        query.where(this.firstKey, this.getKeys(collection, this.localKey));\n    };\n    /**\n     * Set the constraints for the related relation.\n     */\n    HasManyThrough.prototype.addEagerConstraintForRelated = function (query, collection) {\n        query.where(this.secondKey, this.getKeys(collection, this.secondLocalKey));\n    };\n    /**\n     * Create a new indexed map for the through relation.\n     */\n    HasManyThrough.prototype.mapThroughRelations = function (throughs, relatedQuery) {\n        var _this = this;\n        var relateds = this.mapManyRelations(relatedQuery.get(), this.secondKey);\n        return throughs.reduce(function (records, record) {\n            var id = record[_this.firstKey];\n            if (!records[id]) {\n                records[id] = [];\n            }\n            var related = relateds[record[_this.secondLocalKey]];\n            records[id] = records[id].concat(related);\n            return records;\n        }, {});\n    };\n    return HasManyThrough;\n}(Relation));\n\nvar BelongsToMany = /** @class */ (function (_super) {\n    __extends(BelongsToMany, _super);\n    /**\n     * Create a new belongs to instance.\n     */\n    function BelongsToMany(model, related, pivot, foreignPivotKey, relatedPivotKey, parentKey, relatedKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.related = _this.model.relation(related);\n        _this.pivot = _this.model.relation(pivot);\n        _this.foreignPivotKey = foreignPivotKey;\n        _this.relatedPivotKey = relatedPivotKey;\n        _this.parentKey = parentKey;\n        _this.relatedKey = relatedKey;\n        return _this;\n    }\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    BelongsToMany.prototype.define = function (schema) {\n        return schema.many(this.related);\n    };\n    /**\n     * Attach the relational key to the given data. Since belongs to many\n     * relationship doesn't have any foreign key, it would do nothing.\n     */\n    BelongsToMany.prototype.attach = function (_key, _record, _data) {\n        return;\n    };\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    BelongsToMany.prototype.make = function (value, _parent, _key) {\n        return this.makeManyRelation(value, this.related);\n    };\n    /**\n     * Load the belongs to relationship for the record.\n     */\n    BelongsToMany.prototype.load = function (query, collection, name, constraints) {\n        var _this = this;\n        var relatedQuery = this.getRelation(query, this.related.entity, constraints);\n        var pivotQuery = query.newQuery(this.pivot.entity);\n        this.addEagerConstraintForPivot(pivotQuery, collection);\n        var pivots = pivotQuery.get();\n        this.addEagerConstraintForRelated(relatedQuery, pivots);\n        var relateds = this.mapPivotRelations(pivots, relatedQuery);\n        collection.forEach(function (item) {\n            var related = relateds[item[_this.parentKey]];\n            item[name] = related || [];\n        });\n    };\n    /**\n     * Set the constraints for the pivot relation.\n     */\n    BelongsToMany.prototype.addEagerConstraintForPivot = function (query, collection) {\n        query.whereFk(this.foreignPivotKey, this.getKeys(collection, this.parentKey));\n    };\n    /**\n     * Set the constraints for the related relation.\n     */\n    BelongsToMany.prototype.addEagerConstraintForRelated = function (query, collection) {\n        query.whereFk(this.relatedKey, this.getKeys(collection, this.relatedPivotKey));\n    };\n    /**\n     * Create a new indexed map for the pivot relation.\n     */\n    BelongsToMany.prototype.mapPivotRelations = function (pivots, relatedQuery) {\n        var _this = this;\n        var relateds = this.mapManyRelations(relatedQuery.get(), this.relatedKey);\n        return pivots.reduce(function (records, record) {\n            var id = record[_this.foreignPivotKey];\n            if (!records[id]) {\n                records[id] = [];\n            }\n            var related = relateds[record[_this.relatedPivotKey]];\n            if (related) {\n                records[id] = records[id].concat(related);\n            }\n            return records;\n        }, {});\n    };\n    /**\n     * Create pivot records for the given records if needed.\n     */\n    BelongsToMany.prototype.createPivots = function (parent, data, key) {\n        var _this = this;\n        if (this.pivot.primaryKey instanceof Array === false)\n            return data;\n        Utils.forOwn(data[parent.entity], function (record) {\n            var related = record[key];\n            if (related === undefined || related.length === 0) {\n                return;\n            }\n            _this.createPivotRecord(data, record, related);\n        });\n        return data;\n    };\n    /**\n     * Create a pivot record.\n     */\n    BelongsToMany.prototype.createPivotRecord = function (data, record, related) {\n        var _this = this;\n        related.forEach(function (id) {\n            var _a, _b;\n            var parentId = record[_this.parentKey];\n            var relatedId = data[_this.related.entity][id][_this.relatedKey];\n            var pivotKey = relatedId + \"_\" + parentId;\n            var pivotRecord = data[_this.pivot.entity] ? data[_this.pivot.entity][pivotKey] : {};\n            data[_this.pivot.entity] = __assign({}, data[_this.pivot.entity], (_a = {}, _a[pivotKey] = __assign({}, pivotRecord, (_b = { $id: pivotKey }, _b[_this.foreignPivotKey] = parentId, _b[_this.relatedPivotKey] = relatedId, _b)), _a));\n        });\n    };\n    return BelongsToMany;\n}(Relation));\n\nvar MorphTo = /** @class */ (function (_super) {\n    __extends(MorphTo, _super);\n    /**\n     * Create a new morph to instance.\n     */\n    function MorphTo(model, id, type) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.id = id;\n        _this.type = type;\n        return _this;\n    }\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    MorphTo.prototype.define = function (schema) {\n        var _this = this;\n        return schema.union(function (_value, parentValue) { return parentValue[_this.type]; });\n    };\n    /**\n     * Attach the relational key to the given record. Since morph to\n     * relationship doesn't have any foreign key, it would do nothing.\n     */\n    MorphTo.prototype.attach = function (_key, _record, _data) {\n        return;\n    };\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    MorphTo.prototype.make = function (value, parent, _key) {\n        if (!this.isOneRelation(value)) {\n            return null;\n        }\n        var related = parent[this.type];\n        var model = this.model.relation(related);\n        return model ? new model(value) : null;\n    };\n    /**\n     * Load the morph to relationship for the collection.\n     */\n    MorphTo.prototype.load = function (query, collection, name, constraints) {\n        var _this = this;\n        var types = this.getTypes(collection);\n        var relateds = types.reduce(function (relateds, type) {\n            var relatedQuery = _this.getRelation(query, type, constraints);\n            relateds[type] = _this.mapSingleRelations(relatedQuery.get(), '$id');\n            return relateds;\n        }, {});\n        collection.forEach(function (item) {\n            var id = item[_this.id];\n            var type = item[_this.type];\n            var related = relateds[type][id];\n            item[name] = related || null;\n        });\n    };\n    /**\n     * Get all types from the collection.\n     */\n    MorphTo.prototype.getTypes = function (collection) {\n        var _this = this;\n        return collection.reduce(function (types, item) {\n            var type = item[_this.type];\n            !types.includes(type) && types.push(type);\n            return types;\n        }, []);\n    };\n    return MorphTo;\n}(Relation));\n\nvar MorphOne = /** @class */ (function (_super) {\n    __extends(MorphOne, _super);\n    /**\n     * Create a new belongs to instance.\n     */\n    function MorphOne(model, related, id, type, localKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.related = _this.model.relation(related);\n        _this.id = id;\n        _this.type = type;\n        _this.localKey = localKey;\n        return _this;\n    }\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    MorphOne.prototype.define = function (schema) {\n        return schema.one(this.related);\n    };\n    /**\n     * Attach the relational key to the given data.\n     */\n    MorphOne.prototype.attach = function (key, record, data) {\n        var relatedItem = data[this.related.entity] && data[this.related.entity][key];\n        if (!relatedItem) {\n            return;\n        }\n        relatedItem[this.id] = relatedItem[this.id] || record.$id;\n        relatedItem[this.type] = relatedItem[this.type] || this.model.entity;\n    };\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    MorphOne.prototype.make = function (value, _parent, _key) {\n        if (!this.isOneRelation(value)) {\n            return null;\n        }\n        return new this.related(value);\n    };\n    /**\n     * Load the morph many relationship for the record.\n     */\n    MorphOne.prototype.load = function (query, collection, name, constraints) {\n        var _this = this;\n        var relatedQuery = this.getRelation(query, this.related.entity, constraints);\n        this.addEagerConstraintForMorphOne(relatedQuery, collection, query.entity);\n        var relations = this.mapSingleRelations(relatedQuery.get(), this.id);\n        collection.forEach(function (item) {\n            var related = relations[item[_this.localKey]];\n            item[name] = related || null;\n        });\n    };\n    /**\n     * Set the constraints for an eager load of the relation.\n     */\n    MorphOne.prototype.addEagerConstraintForMorphOne = function (query, collection, type) {\n        query.whereFk(this.type, type).whereFk(this.id, this.getKeys(collection, this.localKey));\n    };\n    return MorphOne;\n}(Relation));\n\nvar MorphMany = /** @class */ (function (_super) {\n    __extends(MorphMany, _super);\n    /**\n     * Create a new belongs to instance.\n     */\n    function MorphMany(model, related, id, type, localKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.related = _this.model.relation(related);\n        _this.id = id;\n        _this.type = type;\n        _this.localKey = localKey;\n        return _this;\n    }\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    MorphMany.prototype.define = function (schema) {\n        return schema.many(this.related);\n    };\n    /**\n     * Attach the relational key to the given data.\n     */\n    MorphMany.prototype.attach = function (key, record, data) {\n        var _this = this;\n        if (!Array.isArray(key)) {\n            return;\n        }\n        var relatedItems = data[this.related.entity];\n        key.forEach(function (id) {\n            var relatedItem = relatedItems[id];\n            relatedItem[_this.id] = relatedItem[_this.id] || record.$id;\n            relatedItem[_this.type] = relatedItem[_this.type] || _this.model.entity;\n        });\n    };\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    MorphMany.prototype.make = function (value, _parent, _key) {\n        return this.makeManyRelation(value, this.related);\n    };\n    /**\n     * Load the morph many relationship for the record.\n     */\n    MorphMany.prototype.load = function (query, collection, name, constraints) {\n        var _this = this;\n        var relatedQuery = this.getRelation(query, this.related.entity, constraints);\n        this.addEagerConstraintForMorphMany(relatedQuery, collection, query.entity);\n        var relations = this.mapManyRelations(relatedQuery.get(), this.id);\n        collection.forEach(function (item) {\n            var related = relations[item[_this.localKey]];\n            item[name] = related || [];\n        });\n    };\n    /**\n     * Set the constraints for an eager load of the relation.\n     */\n    MorphMany.prototype.addEagerConstraintForMorphMany = function (query, collection, type) {\n        query.whereFk(this.type, type).whereFk(this.id, this.getKeys(collection, this.localKey));\n    };\n    return MorphMany;\n}(Relation));\n\nvar MorphToMany = /** @class */ (function (_super) {\n    __extends(MorphToMany, _super);\n    /**\n     * Create a new belongs to instance.\n     */\n    function MorphToMany(model, related, pivot, relatedId, id, type, parentKey, relatedKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.related = _this.model.relation(related);\n        _this.pivot = _this.model.relation(pivot);\n        _this.relatedId = relatedId;\n        _this.id = id;\n        _this.type = type;\n        _this.parentKey = parentKey;\n        _this.relatedKey = relatedKey;\n        return _this;\n    }\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    MorphToMany.prototype.define = function (schema) {\n        return schema.many(this.related);\n    };\n    /**\n     * Attach the relational key to the given record. Since morph to many\n     * relationship doesn't have any foreign key, it would do nothing.\n     */\n    MorphToMany.prototype.attach = function (_key, _record, _data) {\n        return;\n    };\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    MorphToMany.prototype.make = function (value, _parent, _key) {\n        return this.makeManyRelation(value, this.related);\n    };\n    /**\n     * Load the morph to many relationship for the collection.\n     */\n    MorphToMany.prototype.load = function (query, collection, name, constraints) {\n        var _this = this;\n        var relatedQuery = this.getRelation(query, this.related.entity, constraints);\n        var pivotQuery = query.newQuery(this.pivot.entity);\n        this.addEagerConstraintForPivot(pivotQuery, collection, query.entity);\n        var pivots = pivotQuery.get();\n        this.addEagerConstraintForRelated(relatedQuery, pivots);\n        var relateds = this.mapPivotRelations(pivots, relatedQuery);\n        collection.forEach(function (item) {\n            var related = relateds[item[_this.parentKey]];\n            item[name] = related || [];\n        });\n    };\n    /**\n     * Set the constraints for the pivot relation.\n     */\n    MorphToMany.prototype.addEagerConstraintForPivot = function (query, collection, type) {\n        query.whereFk(this.type, type).whereFk(this.id, this.getKeys(collection, this.parentKey));\n    };\n    /**\n     * Set the constraints for the related relation.\n     */\n    MorphToMany.prototype.addEagerConstraintForRelated = function (query, collection) {\n        query.whereFk(this.relatedKey, this.getKeys(collection, this.relatedId));\n    };\n    /**\n     * Create a new indexed map for the pivot relation.\n     */\n    MorphToMany.prototype.mapPivotRelations = function (pivots, relatedQuery) {\n        var _this = this;\n        var relateds = this.mapManyRelations(relatedQuery.get(), this.relatedKey);\n        return pivots.reduce(function (records, record) {\n            var id = record[_this.id];\n            if (!records[id]) {\n                records[id] = [];\n            }\n            var related = relateds[record[_this.relatedId]];\n            records[id] = records[id].concat(related);\n            return records;\n        }, {});\n    };\n    /**\n     * Create pivot records for the given records if needed.\n     */\n    MorphToMany.prototype.createPivots = function (parent, data, key) {\n        var _this = this;\n        Utils.forOwn(data[parent.entity], function (record) {\n            var relatedIds = parent.query().newQuery(_this.pivot.entity)\n                .where(_this.id, record[_this.parentKey])\n                .where(_this.type, parent.entity)\n                .get()\n                .map(function (pivotRecord) { return pivotRecord[_this.parentKey]; });\n            var relateds = (record[key] || []).filter(function (relatedId) { return !relatedIds.includes(relatedId); });\n            if (!Array.isArray(relateds) || relateds.length === 0) {\n                return;\n            }\n            _this.createPivotRecord(parent, data, record, relateds);\n        });\n        return data;\n    };\n    /**\n     * Create a pivot record.\n     */\n    MorphToMany.prototype.createPivotRecord = function (parent, data, record, related) {\n        var _this = this;\n        related.forEach(function (id) {\n            var _a, _b;\n            var parentId = record[_this.parentKey];\n            var relatedId = data[_this.related.entity][id][_this.relatedKey];\n            var pivotKey = parentId + \"_\" + id + \"_\" + parent.entity;\n            data[_this.pivot.entity] = __assign({}, data[_this.pivot.entity], (_a = {}, _a[pivotKey] = (_b = {\n                    $id: pivotKey\n                },\n                _b[_this.relatedId] = relatedId,\n                _b[_this.id] = parentId,\n                _b[_this.type] = parent.entity,\n                _b), _a));\n        });\n    };\n    return MorphToMany;\n}(Relation));\n\nvar MorphedByMany = /** @class */ (function (_super) {\n    __extends(MorphedByMany, _super);\n    /**\n     * Create a new belongs to instance.\n     */\n    function MorphedByMany(model, related, pivot, relatedId, id, type, parentKey, relatedKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.related = _this.model.relation(related);\n        _this.pivot = _this.model.relation(pivot);\n        _this.relatedId = relatedId;\n        _this.id = id;\n        _this.type = type;\n        _this.parentKey = parentKey;\n        _this.relatedKey = relatedKey;\n        return _this;\n    }\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    MorphedByMany.prototype.define = function (schema) {\n        return schema.many(this.related);\n    };\n    /**\n     * Attach the relational key to the given data. Since morphed by many\n     * relationship doesn't have any foreign key, it would do nothing.\n     */\n    MorphedByMany.prototype.attach = function (_key, _record, _data) {\n        return;\n    };\n    /**\n     * Make value to be set to model property. This method is used when\n     * instantiating a model or creating a plain object from a model.\n     */\n    MorphedByMany.prototype.make = function (value, _parent, _key) {\n        return this.makeManyRelation(value, this.related);\n    };\n    /**\n     * Load the morph many relationship for the record.\n     */\n    MorphedByMany.prototype.load = function (query, collection, name, constraints) {\n        var _this = this;\n        var relatedQuery = this.getRelation(query, this.related.entity, constraints);\n        var pivotQuery = query.newQuery(this.pivot.entity);\n        this.addEagerConstraintForPivot(pivotQuery, collection, this.related.entity);\n        var pivots = pivotQuery.get();\n        this.addEagerConstraintForRelated(relatedQuery, pivots);\n        var relateds = this.mapPivotRelations(pivots, relatedQuery);\n        collection.forEach(function (item) {\n            var related = relateds[item[_this.parentKey]];\n            item[name] = related || [];\n        });\n    };\n    /**\n     * Set the constraints for the pivot relation.\n     */\n    MorphedByMany.prototype.addEagerConstraintForPivot = function (query, collection, type) {\n        query.whereFk(this.type, type).whereFk(this.relatedId, this.getKeys(collection, this.parentKey));\n    };\n    /**\n     * Set the constraints for the related relation.\n     */\n    MorphedByMany.prototype.addEagerConstraintForRelated = function (query, collection) {\n        query.whereFk(this.relatedKey, this.getKeys(collection, this.id));\n    };\n    /**\n     * Create a new indexed map for the pivot relation.\n     */\n    MorphedByMany.prototype.mapPivotRelations = function (pivots, relatedQuery) {\n        var _this = this;\n        var relateds = this.mapManyRelations(relatedQuery.get(), this.relatedKey);\n        return pivots.reduce(function (records, record) {\n            var id = record[_this.relatedId];\n            if (!records[id]) {\n                records[id] = [];\n            }\n            var related = relateds[record[_this.id]];\n            records[id] = records[id].concat(related);\n            return records;\n        }, {});\n    };\n    /**\n     * Create pivot records for the given records if needed.\n     */\n    MorphedByMany.prototype.createPivots = function (parent, data, key) {\n        var _this = this;\n        Utils.forOwn(data[parent.entity], function (record) {\n            var related = record[key];\n            if (!Array.isArray(related)) {\n                return;\n            }\n            _this.createPivotRecord(data, record, related);\n        });\n        return data;\n    };\n    /**\n     * Create a pivot record.\n     */\n    MorphedByMany.prototype.createPivotRecord = function (data, record, related) {\n        var _this = this;\n        related.forEach(function (id) {\n            var _a, _b;\n            var parentId = record[_this.parentKey];\n            var pivotKey = id + \"_\" + parentId + \"_\" + _this.related.entity;\n            data[_this.pivot.entity] = __assign({}, data[_this.pivot.entity], (_a = {}, _a[pivotKey] = (_b = {\n                    $id: pivotKey\n                },\n                _b[_this.relatedId] = parentId,\n                _b[_this.id] = id,\n                _b[_this.type] = _this.related.entity,\n                _b), _a));\n        });\n    };\n    return MorphedByMany;\n}(Relation));\n\nvar Serializer = /** @class */ (function () {\n    function Serializer() {\n    }\n    /**\n     * Serialize given model fields value to json.\n     */\n    Serializer.serialize = function (model) {\n        var _this = this;\n        var fields = model.$fields();\n        return Object.keys(fields).reduce(function (record, key) {\n            var value = model[key];\n            record[key] = _this.serializeValue(value);\n            return record;\n        }, {});\n    };\n    /**\n     * Serialize given value.\n     */\n    Serializer.serializeValue = function (value) {\n        if (value instanceof Model) {\n            return this.serializeItem(value);\n        }\n        if (Array.isArray(value)) {\n            return this.serializeCollection(value);\n        }\n        return value;\n    };\n    /**\n     * Serialize an item into json.\n     */\n    Serializer.serializeItem = function (item) {\n        return item.$toJson();\n    };\n    /**\n     * Serialize a collection into json.\n     */\n    Serializer.serializeCollection = function (collection) {\n        return collection.map(function (item) {\n            if (item instanceof Model) {\n                return item.$toJson();\n            }\n            return item;\n        });\n    };\n    return Serializer;\n}());\n\n/* istanbul ignore next */\nvar NoKey = /** @class */ (function () {\n    function NoKey() {\n    }\n    /**\n     * Set new unique id value.\n     */\n    NoKey.set = function () {\n        this.value = \"\" + this.prefix + this.count;\n    };\n    /**\n     * Get the current unique id value.\n     */\n    NoKey.get = function () {\n        return this.value;\n    };\n    /**\n     * Increment the count, new unique id value.\n     */\n    NoKey.increment = function () {\n        this.count++;\n        this.set();\n        return this.get();\n    };\n    /**\n     * Count to create a unique id for the record that missing its primary key.\n     */\n    NoKey.count = 0;\n    /**\n     * Prefix string to be used for undefined primary key value.\n     */\n    NoKey.prefix = '_no_key_';\n    /**\n     * The current unique id value. This is the combination of\n     * the `prefix` and the `count`.\n     */\n    NoKey.value = '';\n    return NoKey;\n}());\n\nvar Model = /** @class */ (function () {\n    /**\n     * Create a new model instance.\n     */\n    function Model(record) {\n        /**\n         * The ID value of the store index.\n         */\n        this.$id = null;\n        this.$fill(record);\n    }\n    /**\n     * The definition of the fields of the model and its relations.\n     */\n    Model.fields = function () {\n        return {};\n    };\n    /**\n     * Get the model schema definition by adding additional default fields.\n     */\n    Model.getFields = function () {\n        if (!this.cachedFields) {\n            this.cachedFields = {};\n        }\n        if (this.cachedFields[this.entity]) {\n            return this.cachedFields[this.entity];\n        }\n        this.cachedFields[this.entity] = this.fields();\n        return this.cachedFields[this.entity];\n    };\n    /**\n     * Create an attr attribute. The given value will be used as a default\n     * value for the field.\n     */\n    Model.attr = function (value, mutator) {\n        return new Attr(this, value, mutator);\n    };\n    /**\n     * Create a string attribute.\n     */\n    Model.string = function (value, mutator) {\n        return new String$1(this, value, mutator);\n    };\n    /**\n     * Create a number attribute.\n     */\n    Model.number = function (value, mutator) {\n        return new Number(this, value, mutator);\n    };\n    /**\n     * Create a boolean attribute.\n     */\n    Model.boolean = function (value, mutator) {\n        return new Boolean(this, value, mutator);\n    };\n    /**\n     * Create an increment attribute. The field with this attribute will\n     * automatically increment its value when creating a new record.\n     */\n    Model.increment = function () {\n        return new Increment(this);\n    };\n    /**\n     * Create a has one relationship.\n     */\n    Model.hasOne = function (related, foreignKey, localKey) {\n        return new HasOne(this, related, foreignKey, this.localKey(localKey));\n    };\n    /**\n     * Create a belongs to relationship.\n     */\n    Model.belongsTo = function (parent, foreignKey, ownerKey) {\n        return new BelongsTo(this, parent, foreignKey, this.relation(parent).localKey(ownerKey));\n    };\n    /**\n     * Create a has many relationship.\n     */\n    Model.hasMany = function (related, foreignKey, localKey) {\n        return new HasMany(this, related, foreignKey, this.localKey(localKey));\n    };\n    /**\n     * Create a has many by relationship.\n     */\n    Model.hasManyBy = function (parent, foreignKey, ownerKey) {\n        return new HasManyBy(this, parent, foreignKey, this.relation(parent).localKey(ownerKey));\n    };\n    /**\n     * Create a has many through relationship.\n     */\n    Model.hasManyThrough = function (related, through, firstKey, secondKey, localKey, secondLocalKey) {\n        return new HasManyThrough(this, related, through, firstKey, secondKey, this.localKey(localKey), this.relation(through).localKey(secondLocalKey));\n    };\n    /**\n     * The belongs to many relationship.\n     */\n    Model.belongsToMany = function (related, pivot, foreignPivotKey, relatedPivotKey, parentKey, relatedKey) {\n        return new BelongsToMany(this, related, pivot, foreignPivotKey, relatedPivotKey, this.localKey(parentKey), this.relation(related).localKey(relatedKey));\n    };\n    /**\n     * Create a morph to relationship.\n     */\n    Model.morphTo = function (id, type) {\n        return new MorphTo(this, id, type);\n    };\n    /**\n     * Create a morph one relationship.\n     */\n    Model.morphOne = function (related, id, type, localKey) {\n        return new MorphOne(this, related, id, type, this.localKey(localKey));\n    };\n    /**\n     * Create a morph many relationship.\n     */\n    Model.morphMany = function (related, id, type, localKey) {\n        return new MorphMany(this, related, id, type, this.localKey(localKey));\n    };\n    /**\n     * Create a morph to many relationship.\n     */\n    Model.morphToMany = function (related, pivot, relatedId, id, type, parentKey, relatedKey) {\n        return new MorphToMany(this, related, pivot, relatedId, id, type, this.localKey(parentKey), this.relation(related).localKey(relatedKey));\n    };\n    /**\n     * Create a morphed by many relationship.\n     */\n    Model.morphedByMany = function (related, pivot, relatedId, id, type, parentKey, relatedKey) {\n        return new MorphedByMany(this, related, pivot, relatedId, id, type, this.localKey(parentKey), this.relation(related).localKey(relatedKey));\n    };\n    /**\n     * Mutators to mutate matching fields when instantiating the model.\n     */\n    Model.mutators = function () {\n        return {};\n    };\n    /**\n     * Types mapping used to dispatch entities based on their discriminator field\n     */\n    Model.types = function () {\n        return {};\n    };\n    /**\n     * Get the database instance from the container.\n     */\n    Model.database = function () {\n        return Container.database;\n    };\n    /**\n     * Get the store instance from the container.\n     */\n    Model.store = function () {\n        return this.database().store;\n    };\n    /**\n     * Create a namespaced method name for Vuex Module from the given\n     * method name.\n     */\n    Model.namespace = function (method) {\n        return this.database().namespace + \"/\" + this.entity + \"/\" + method;\n    };\n    /**\n     * Call Vuex Getters.\n     */\n    Model.getters = function (method) {\n        return this.store().getters[this.namespace(method)];\n    };\n    /**\n     * Dispatch Vuex Action.\n     */\n    Model.dispatch = function (method, payload) {\n        return this.store().dispatch(this.namespace(method), payload);\n    };\n    /**\n     * Commit Vuex Mutation.\n     */\n    Model.commit = function (callback) {\n        this.store().commit(this.database().namespace + \"/$mutate\", {\n            entity: this.entity,\n            callback: callback\n        });\n    };\n    /**\n     * Get all records.\n     */\n    Model.all = function () {\n        return this.getters('all')();\n    };\n    /**\n     * Find a record.\n     */\n    Model.find = function (id) {\n        return this.getters('find')(id);\n    };\n    /**\n     * Get the record of the given array of ids.\n     */\n    Model.findIn = function (idList) {\n        return this.getters('findIn')(idList);\n    };\n    /**\n     * Get query instance.\n     */\n    Model.query = function () {\n        return this.getters('query')();\n    };\n    /**\n     * Create new data with all fields filled by default values.\n     */\n    Model.new = function () {\n        return this.dispatch('new');\n    };\n    /**\n     * Save given data to the store by replacing all existing records in the\n     * store. If you want to save data without replacing existing records,\n     * use the `insert` method instead.\n     */\n    Model.create = function (payload) {\n        return this.dispatch('create', payload);\n    };\n    /**\n     * Insert records.\n     */\n    Model.insert = function (payload) {\n        return this.dispatch('insert', payload);\n    };\n    /**\n     * Update records.\n     */\n    Model.update = function (payload) {\n        return this.dispatch('update', payload);\n    };\n    /**\n     * Insert or update records.\n     */\n    Model.insertOrUpdate = function (payload) {\n        return this.dispatch('insertOrUpdate', payload);\n    };\n    /**\n     * Delete records that matches the given condition.\n     */\n    Model.delete = function (payload) {\n        return this.dispatch('delete', payload);\n    };\n    /**\n     * Delete all records.\n     */\n    Model.deleteAll = function () {\n        return this.dispatch('deleteAll');\n    };\n    /**\n     * Get the value of the primary key.\n     */\n    Model.id = function (record) {\n        var key = this.primaryKey;\n        if (typeof key === 'string') {\n            return record[key];\n        }\n        return key.map(function (k) { return (record[k] || NoKey.increment()); }).join('_');\n    };\n    /**\n     * Get local key to pass to the attributes.\n     */\n    Model.localKey = function (key) {\n        if (key) {\n            return key;\n        }\n        return typeof this.primaryKey === 'string' ? this.primaryKey : 'id';\n    };\n    /**\n     * Get a model from the container.\n     */\n    Model.relation = function (model) {\n        if (typeof model !== 'string') {\n            return model;\n        }\n        return this.database().model(model);\n    };\n    /**\n     * Get the attribute class for the given attribute name.\n     */\n    Model.getAttributeClass = function (name) {\n        switch (name) {\n            case 'increment': return Increment;\n            default:\n                throw Error(\"The attribute name \\\"\" + name + \"\\\" doesn't exist.\");\n        }\n    };\n    /**\n     * Get all of the fields that matches the given attribute name.\n     */\n    Model.getFieldsByAttribute = function (name) {\n        var attr = this.getAttributeClass(name);\n        var fields = this.getFields();\n        return Object.keys(fields).reduce(function (newFields, key) {\n            var field = fields[key];\n            if (field instanceof attr) {\n                newFields[key] = field;\n            }\n            return newFields;\n        }, {});\n    };\n    /**\n     * Get all `increment` fields from the schema.\n     */\n    Model.getIncrementFields = function () {\n        return this.getFieldsByAttribute('increment');\n    };\n    /**\n     * Check if fields contains the `increment` field type.\n     */\n    Model.hasIncrementFields = function () {\n        return Object.keys(this.getIncrementFields()).length > 0;\n    };\n    /**\n     * Get all `belongsToMany` fields from the schema.\n     */\n    Model.pivotFields = function () {\n        var fields = [];\n        Utils.forOwn(this.getFields(), function (field, key) {\n            var _a;\n            if (field instanceof BelongsToMany || field instanceof MorphToMany || field instanceof MorphedByMany) {\n                fields.push((_a = {}, _a[key] = field, _a));\n            }\n        });\n        return fields;\n    };\n    /**\n     * Check if fields contains the `belongsToMany` field type.\n     */\n    Model.hasPivotFields = function () {\n        return this.pivotFields().length > 0;\n    };\n    /**\n     * Check if the current model has a type definition\n     */\n    Model.hasTypes = function () {\n        return Object.keys(this.types()).length > 0;\n    };\n    /**\n     * Given a Model, this returns the corresponding key in the InheritanceTypes mapping\n     */\n    Model.getTypeKeyValueFromModel = function (model) {\n        var modelToCheck = model || this;\n        var types = this.types();\n        for (var type in types) {\n            if (types[type] === modelToCheck) {\n                return type;\n            }\n        }\n        return null;\n    };\n    /**\n     * Tries to find a Relation field in all types defined in the InheritanceTypes mapping\n     */\n    Model.findRelationInSubTypes = function (relationName) {\n        var types = this.types();\n        for (var type in types) {\n            var fields = types[type].getFields();\n            for (var fieldName in fields) {\n                if (fieldName === relationName && fields[fieldName] instanceof Relation) {\n                    return fields[fieldName];\n                }\n            }\n        }\n        return null;\n    };\n    /**\n     * Fill any missing fields in the given record with the default value defined\n     * in the model schema.\n     */\n    Model.hydrate = function (record) {\n        return (new this(record)).$toJson();\n    };\n    /**\n     * Get the constructor of this model.\n     */\n    Model.prototype.$self = function () {\n        return this.constructor;\n    };\n    /**\n     * The definition of the fields of the model and its relations.\n     */\n    Model.prototype.$fields = function () {\n        return this.$self().getFields();\n    };\n    /**\n     * Get the store instance from the container.\n     */\n    Model.prototype.$store = function () {\n        return this.$self().store();\n    };\n    /**\n     * Create a namespaced method name for Vuex Module from the given\n     * method name.\n     */\n    Model.prototype.$namespace = function (method) {\n        return this.$self().namespace(method);\n    };\n    /**\n     * Call Vuex Getetrs.\n     */\n    Model.prototype.$getters = function (method) {\n        return this.$self().getters(method);\n    };\n    /**\n     * Dispatch Vuex Action.\n     */\n    Model.prototype.$dispatch = function (method, payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.$self().dispatch(method, payload)];\n            });\n        });\n    };\n    /**\n     * Get all records.\n     */\n    Model.prototype.$all = function () {\n        return this.$getters('all')();\n    };\n    /**\n     * Find a record.\n     */\n    Model.prototype.$find = function (id) {\n        return this.$getters('find')(id);\n    };\n    /**\n     * Find record of the given array of ids.\n     */\n    Model.prototype.$findIn = function (idList) {\n        return this.$getters('findIn')(idList);\n    };\n    /**\n     * Get query instance.\n     */\n    Model.prototype.$query = function () {\n        return this.$getters('query')();\n    };\n    /**\n     * Create records.\n     */\n    Model.prototype.$create = function (payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.$dispatch('create', payload)];\n            });\n        });\n    };\n    /**\n     * Create records.\n     */\n    Model.prototype.$insert = function (payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.$dispatch('insert', payload)];\n            });\n        });\n    };\n    /**\n     * Update records.\n     */\n    Model.prototype.$update = function (payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (Array.isArray(payload)) {\n                    return [2 /*return*/, this.$dispatch('update', payload)];\n                }\n                if (payload.where !== undefined) {\n                    return [2 /*return*/, this.$dispatch('update', payload)];\n                }\n                if (this.$self().id(payload) === undefined) {\n                    return [2 /*return*/, this.$dispatch('update', { where: this.$id, data: payload })];\n                }\n                return [2 /*return*/, this.$dispatch('update', payload)];\n            });\n        });\n    };\n    /**\n     * Insert or update records.\n     */\n    Model.prototype.$insertOrUpdate = function (payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.$dispatch('insertOrUpdate', payload)];\n            });\n        });\n    };\n    /**\n     * Save record.\n     */\n    Model.prototype.$save = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var fields, record, records;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        fields = this.$self().getFields();\n                        record = Object.keys(fields).reduce(function (record, key) {\n                            if (fields[key] instanceof Type) {\n                                record[key] = _this[key];\n                            }\n                            return record;\n                        }, {});\n                        return [4 /*yield*/, this.$dispatch('insertOrUpdate', { data: record })];\n                    case 1:\n                        records = _a.sent();\n                        this.$fill(records[this.$self().entity][0]);\n                        return [2 /*return*/, this];\n                }\n            });\n        });\n    };\n    /**\n     * Delete records that matches the given condition.\n     */\n    Model.prototype.$delete = function (condition) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (condition) {\n                    return [2 /*return*/, this.$dispatch('delete', condition)];\n                }\n                if (this.$id === null) {\n                    return [2 /*return*/, null];\n                }\n                return [2 /*return*/, this.$dispatch('delete', this.$id)];\n            });\n        });\n    };\n    /**\n     * Delete all records.\n     */\n    Model.prototype.$deleteAll = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.$dispatch('deleteAll')];\n            });\n        });\n    };\n    /**\n     * Fill the model instance with the given record. If no record were passed,\n     * or if the record has any missing fields, each value of the fields will\n     * be filled with its default value defined at model fields definition.\n     */\n    Model.prototype.$fill = function (record) {\n        var _this = this;\n        var data = record || {};\n        var fields = this.$fields();\n        Object.keys(fields).forEach(function (key) {\n            var field = fields[key];\n            var value = data[key];\n            _this[key] = field.make(value, data, key);\n        });\n        if (data.$id !== undefined) {\n            this.$id = data.$id;\n        }\n    };\n    /**\n     * Serialize field values into json.\n     */\n    Model.prototype.$toJson = function () {\n        return Serializer.serialize(this);\n    };\n    /**\n     * This method is used by Nuxt server-side rendering. It will prevent\n     * `non-POJO` warning when using Vuex ORM with Nuxt universal mode.\n     * The method is not meant to be used publicly by a user.\n     *\n     * See https://github.com/vuex-orm/vuex-orm/issues/255 for more detail.\n     */\n    Model.prototype.toJSON = function () {\n        return this.$toJson();\n    };\n    Model.getModelFromRecord = function (record) {\n        if (!record) {\n            return null;\n        }\n        if (record[this.typeKey] && this.hasTypes()) {\n            var typeValue = record[this.typeKey];\n            var newModel = this.types()[typeValue];\n            return newModel || null;\n        }\n        // Checking if record is already typed\n        if (record instanceof Model) {\n            return record.$self();\n        }\n        return null;\n    };\n    /**\n     * The primary key to be used for the model.\n     */\n    Model.primaryKey = 'id';\n    /**\n     * The discriminator key to be used for the model when inheritance is used\n     */\n    Model.typeKey = 'type';\n    /**\n     * Vuex Store state definition.\n     */\n    Model.state = {};\n    return Model;\n}());\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\n/**\n * Helpers to enable Immutable compatibility *without* bringing in\n * the 'immutable' package as a dependency.\n */\n\n/**\n * Check if an object is immutable by checking if it has a key specific\n * to the immutable library.\n *\n * @param  {any} object\n * @return {bool}\n */\nfunction isImmutable(object) {\n  return !!(object && typeof object.hasOwnProperty === 'function' && (object.hasOwnProperty('__ownerID') || // Immutable.Map\n  object._map && object._map.hasOwnProperty('__ownerID'))); // Immutable.Record\n}\n/**\n * Denormalize an immutable entity.\n *\n * @param  {Schema} schema\n * @param  {Immutable.Map|Immutable.Record} input\n * @param  {function} unvisit\n * @param  {function} getDenormalizedEntity\n * @return {Immutable.Map|Immutable.Record}\n */\n\nfunction denormalizeImmutable(schema, input, unvisit) {\n  return Object.keys(schema).reduce(function (object, key) {\n    // Immutable maps cast keys to strings on write so we need to ensure\n    // we're accessing them using string keys.\n    var stringKey = \"\" + key;\n\n    if (object.has(stringKey)) {\n      return object.set(stringKey, unvisit(object.get(stringKey), schema[stringKey]));\n    } else {\n      return object;\n    }\n  }, input);\n}\n\nvar getDefaultGetId = function getDefaultGetId(idAttribute) {\n  return function (input) {\n    return isImmutable(input) ? input.get(idAttribute) : input[idAttribute];\n  };\n};\n\nvar EntitySchema =\n/*#__PURE__*/\nfunction () {\n  function EntitySchema(key, definition, options) {\n    if (definition === void 0) {\n      definition = {};\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!key || typeof key !== 'string') {\n      throw new Error(\"Expected a string key for Entity, but found \" + key + \".\");\n    }\n\n    var _options = options,\n        _options$idAttribute = _options.idAttribute,\n        idAttribute = _options$idAttribute === void 0 ? 'id' : _options$idAttribute,\n        _options$mergeStrateg = _options.mergeStrategy,\n        mergeStrategy = _options$mergeStrateg === void 0 ? function (entityA, entityB) {\n      return _objectSpread({}, entityA, entityB);\n    } : _options$mergeStrateg,\n        _options$processStrat = _options.processStrategy,\n        processStrategy = _options$processStrat === void 0 ? function (input) {\n      return _objectSpread({}, input);\n    } : _options$processStrat;\n    this._key = key;\n    this._getId = typeof idAttribute === 'function' ? idAttribute : getDefaultGetId(idAttribute);\n    this._idAttribute = idAttribute;\n    this._mergeStrategy = mergeStrategy;\n    this._processStrategy = processStrategy;\n    this.define(definition);\n  }\n\n  var _proto = EntitySchema.prototype;\n\n  _proto.define = function define(definition) {\n    this.schema = Object.keys(definition).reduce(function (entitySchema, key) {\n      var _objectSpread2;\n\n      var schema = definition[key];\n      return _objectSpread({}, entitySchema, (_objectSpread2 = {}, _objectSpread2[key] = schema, _objectSpread2));\n    }, this.schema || {});\n  };\n\n  _proto.getId = function getId(input, parent, key) {\n    return this._getId(input, parent, key);\n  };\n\n  _proto.merge = function merge(entityA, entityB) {\n    return this._mergeStrategy(entityA, entityB);\n  };\n\n  _proto.normalize = function normalize(input, parent, key, visit, addEntity, visitedEntities) {\n    var _this = this;\n\n    if (visitedEntities.some(function (entity) {\n      return entity === input;\n    })) {\n      return this.getId(input, parent, key);\n    }\n\n    visitedEntities.push(input);\n\n    var processedEntity = this._processStrategy(input, parent, key);\n\n    Object.keys(this.schema).forEach(function (key) {\n      if (processedEntity.hasOwnProperty(key) && typeof processedEntity[key] === 'object') {\n        var schema = _this.schema[key];\n        processedEntity[key] = visit(processedEntity[key], processedEntity, key, schema, addEntity, visitedEntities);\n      }\n    });\n    addEntity(this, processedEntity, input, parent, key);\n    return this.getId(input, parent, key);\n  };\n\n  _proto.denormalize = function denormalize(entity, unvisit) {\n    var _this2 = this;\n\n    if (isImmutable(entity)) {\n      return denormalizeImmutable(this.schema, entity, unvisit);\n    }\n\n    Object.keys(this.schema).forEach(function (key) {\n      if (entity.hasOwnProperty(key)) {\n        var schema = _this2.schema[key];\n        entity[key] = unvisit(entity[key], schema);\n      }\n    });\n    return entity;\n  };\n\n  _createClass(EntitySchema, [{\n    key: \"key\",\n    get: function get() {\n      return this._key;\n    }\n  }, {\n    key: \"idAttribute\",\n    get: function get() {\n      return this._idAttribute;\n    }\n  }]);\n\n  return EntitySchema;\n}();\n\nvar PolymorphicSchema =\n/*#__PURE__*/\nfunction () {\n  function PolymorphicSchema(definition, schemaAttribute) {\n    if (schemaAttribute) {\n      this._schemaAttribute = typeof schemaAttribute === 'string' ? function (input) {\n        return input[schemaAttribute];\n      } : schemaAttribute;\n    }\n\n    this.define(definition);\n  }\n\n  var _proto = PolymorphicSchema.prototype;\n\n  _proto.define = function define(definition) {\n    this.schema = definition;\n  };\n\n  _proto.getSchemaAttribute = function getSchemaAttribute(input, parent, key) {\n    return !this.isSingleSchema && this._schemaAttribute(input, parent, key);\n  };\n\n  _proto.inferSchema = function inferSchema(input, parent, key) {\n    if (this.isSingleSchema) {\n      return this.schema;\n    }\n\n    var attr = this.getSchemaAttribute(input, parent, key);\n    return this.schema[attr];\n  };\n\n  _proto.normalizeValue = function normalizeValue(value, parent, key, visit, addEntity, visitedEntities) {\n    var schema = this.inferSchema(value, parent, key);\n\n    if (!schema) {\n      return value;\n    }\n\n    var normalizedValue = visit(value, parent, key, schema, addEntity, visitedEntities);\n    return this.isSingleSchema || normalizedValue === undefined || normalizedValue === null ? normalizedValue : {\n      id: normalizedValue,\n      schema: this.getSchemaAttribute(value, parent, key)\n    };\n  };\n\n  _proto.denormalizeValue = function denormalizeValue(value, unvisit) {\n    var schemaKey = isImmutable(value) ? value.get('schema') : value.schema;\n\n    if (!this.isSingleSchema && !schemaKey) {\n      return value;\n    }\n\n    var id = isImmutable(value) ? value.get('id') : value.id;\n    var schema = this.isSingleSchema ? this.schema : this.schema[schemaKey];\n    return unvisit(id || value, schema);\n  };\n\n  _createClass(PolymorphicSchema, [{\n    key: \"isSingleSchema\",\n    get: function get() {\n      return !this._schemaAttribute;\n    }\n  }]);\n\n  return PolymorphicSchema;\n}();\n\nvar UnionSchema =\n/*#__PURE__*/\nfunction (_PolymorphicSchema) {\n  _inheritsLoose(UnionSchema, _PolymorphicSchema);\n\n  function UnionSchema(definition, schemaAttribute) {\n    if (!schemaAttribute) {\n      throw new Error('Expected option \"schemaAttribute\" not found on UnionSchema.');\n    }\n\n    return _PolymorphicSchema.call(this, definition, schemaAttribute) || this;\n  }\n\n  var _proto = UnionSchema.prototype;\n\n  _proto.normalize = function normalize(input, parent, key, visit, addEntity, visitedEntities) {\n    return this.normalizeValue(input, parent, key, visit, addEntity, visitedEntities);\n  };\n\n  _proto.denormalize = function denormalize(input, unvisit) {\n    return this.denormalizeValue(input, unvisit);\n  };\n\n  return UnionSchema;\n}(PolymorphicSchema);\n\nvar ValuesSchema =\n/*#__PURE__*/\nfunction (_PolymorphicSchema) {\n  _inheritsLoose(ValuesSchema, _PolymorphicSchema);\n\n  function ValuesSchema() {\n    return _PolymorphicSchema.apply(this, arguments) || this;\n  }\n\n  var _proto = ValuesSchema.prototype;\n\n  _proto.normalize = function normalize(input, parent, key, visit, addEntity, visitedEntities) {\n    var _this = this;\n\n    return Object.keys(input).reduce(function (output, key, index) {\n      var _objectSpread2;\n\n      var value = input[key];\n      return value !== undefined && value !== null ? _objectSpread({}, output, (_objectSpread2 = {}, _objectSpread2[key] = _this.normalizeValue(value, input, key, visit, addEntity, visitedEntities), _objectSpread2)) : output;\n    }, {});\n  };\n\n  _proto.denormalize = function denormalize(input, unvisit) {\n    var _this2 = this;\n\n    return Object.keys(input).reduce(function (output, key) {\n      var _objectSpread3;\n\n      var entityOrId = input[key];\n      return _objectSpread({}, output, (_objectSpread3 = {}, _objectSpread3[key] = _this2.denormalizeValue(entityOrId, unvisit), _objectSpread3));\n    }, {});\n  };\n\n  return ValuesSchema;\n}(PolymorphicSchema);\n\nvar validateSchema = function validateSchema(definition) {\n  var isArray = Array.isArray(definition);\n\n  if (isArray && definition.length > 1) {\n    throw new Error(\"Expected schema definition to be a single schema, but found \" + definition.length + \".\");\n  }\n\n  return definition[0];\n};\n\nvar getValues = function getValues(input) {\n  return Array.isArray(input) ? input : Object.keys(input).map(function (key) {\n    return input[key];\n  });\n};\n\nvar normalize = function normalize(schema, input, parent, key, visit, addEntity, visitedEntities) {\n  schema = validateSchema(schema);\n  var values = getValues(input); // Special case: Arrays pass *their* parent on to their children, since there\n  // is not any special information that can be gathered from themselves directly\n\n  return values.map(function (value, index) {\n    return visit(value, parent, key, schema, addEntity, visitedEntities);\n  });\n};\n\nvar ArraySchema =\n/*#__PURE__*/\nfunction (_PolymorphicSchema) {\n  _inheritsLoose(ArraySchema, _PolymorphicSchema);\n\n  function ArraySchema() {\n    return _PolymorphicSchema.apply(this, arguments) || this;\n  }\n\n  var _proto = ArraySchema.prototype;\n\n  _proto.normalize = function normalize(input, parent, key, visit, addEntity, visitedEntities) {\n    var _this = this;\n\n    var values = getValues(input);\n    return values.map(function (value, index) {\n      return _this.normalizeValue(value, parent, key, visit, addEntity, visitedEntities);\n    }).filter(function (value) {\n      return value !== undefined && value !== null;\n    });\n  };\n\n  _proto.denormalize = function denormalize(input, unvisit) {\n    var _this2 = this;\n\n    return input && input.map ? input.map(function (value) {\n      return _this2.denormalizeValue(value, unvisit);\n    }) : input;\n  };\n\n  return ArraySchema;\n}(PolymorphicSchema);\n\nvar _normalize = function normalize(schema, input, parent, key, visit, addEntity, visitedEntities) {\n  var object = _objectSpread({}, input);\n\n  Object.keys(schema).forEach(function (key) {\n    var localSchema = schema[key];\n    var value = visit(input[key], input, key, localSchema, addEntity, visitedEntities);\n\n    if (value === undefined || value === null) {\n      delete object[key];\n    } else {\n      object[key] = value;\n    }\n  });\n  return object;\n};\n\nvar _denormalize = function denormalize(schema, input, unvisit) {\n  if (isImmutable(input)) {\n    return denormalizeImmutable(schema, input, unvisit);\n  }\n\n  var object = _objectSpread({}, input);\n\n  Object.keys(schema).forEach(function (key) {\n    if (object[key] != null) {\n      object[key] = unvisit(object[key], schema[key]);\n    }\n  });\n  return object;\n};\n\nvar ObjectSchema =\n/*#__PURE__*/\nfunction () {\n  function ObjectSchema(definition) {\n    this.define(definition);\n  }\n\n  var _proto = ObjectSchema.prototype;\n\n  _proto.define = function define(definition) {\n    this.schema = Object.keys(definition).reduce(function (entitySchema, key) {\n      var _objectSpread2;\n\n      var schema = definition[key];\n      return _objectSpread({}, entitySchema, (_objectSpread2 = {}, _objectSpread2[key] = schema, _objectSpread2));\n    }, this.schema || {});\n  };\n\n  _proto.normalize = function normalize() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _normalize.apply(void 0, [this.schema].concat(args));\n  };\n\n  _proto.denormalize = function denormalize() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return _denormalize.apply(void 0, [this.schema].concat(args));\n  };\n\n  return ObjectSchema;\n}();\n\nvar visit = function visit(value, parent, key, schema, addEntity, visitedEntities) {\n  if (typeof value !== 'object' || !value) {\n    return value;\n  }\n\n  if (typeof schema === 'object' && (!schema.normalize || typeof schema.normalize !== 'function')) {\n    var method = Array.isArray(schema) ? normalize : _normalize;\n    return method(schema, value, parent, key, visit, addEntity, visitedEntities);\n  }\n\n  return schema.normalize(value, parent, key, visit, addEntity, visitedEntities);\n};\n\nvar addEntities = function addEntities(entities) {\n  return function (schema, processedEntity, value, parent, key) {\n    var schemaKey = schema.key;\n    var id = schema.getId(value, parent, key);\n\n    if (!(schemaKey in entities)) {\n      entities[schemaKey] = {};\n    }\n\n    var existingEntity = entities[schemaKey][id];\n\n    if (existingEntity) {\n      entities[schemaKey][id] = schema.merge(existingEntity, processedEntity);\n    } else {\n      entities[schemaKey][id] = processedEntity;\n    }\n  };\n};\n\nvar schema = {\n  Array: ArraySchema,\n  Entity: EntitySchema,\n  Object: ObjectSchema,\n  Union: UnionSchema,\n  Values: ValuesSchema\n};\nvar normalize$1 = function normalize(input, schema) {\n  if (!input || typeof input !== 'object') {\n    throw new Error(\"Unexpected input given to normalize. Expected type to be \\\"object\\\", found \\\"\" + typeof input + \"\\\".\");\n  }\n\n  var entities = {};\n  var addEntity = addEntities(entities);\n  var visitedEntities = [];\n  var result = visit(input, input, null, schema, addEntity, visitedEntities);\n  return {\n    entities: entities,\n    result: result\n  };\n};\n\nvar Normalizer = /** @class */ (function () {\n    function Normalizer() {\n    }\n    /**\n     * Normalize the data given data.\n     */\n    Normalizer.process = function (query, record) {\n        if (Utils.isEmpty(record)) {\n            return {};\n        }\n        var entity = query.database().schemas[query.model.entity];\n        var schema = Array.isArray(record) ? [entity] : entity;\n        return normalize$1(record, schema).entities;\n    };\n    return Normalizer;\n}());\n\nvar PivotCreator = /** @class */ (function () {\n    function PivotCreator() {\n    }\n    /**\n     * Create an intermediate entity if the data contains any entities that\n     * require it for example `belongsTo` or `morphMany`.\n     */\n    PivotCreator.process = function (query, data) {\n        Object.keys(data).forEach(function (entity) {\n            var model = query.getModel(entity);\n            if (model.hasPivotFields()) {\n                Utils.forOwn(model.pivotFields(), function (field) {\n                    Utils.forOwn(field, function (attr, key) { attr.createPivots(model, data, key); });\n                });\n            }\n        });\n        return data;\n    };\n    return PivotCreator;\n}());\n\nvar Incrementer = /** @class */ (function () {\n    function Incrementer() {\n    }\n    /**\n     * Increment all fields that have increment attribute.\n     */\n    Incrementer.process = function (query, data) {\n        var _this = this;\n        return Utils.mapValues(data, function (records, entity) {\n            var newQuery = query.newQuery(entity);\n            // If the entity doesn't have increment attribute, do nothing and\n            // just return immediately.\n            if (!newQuery.model.hasIncrementFields()) {\n                return records;\n            }\n            _this.processRecordsByFields(records, newQuery);\n            return records;\n        });\n    };\n    /**\n     * Process all of the increment fields.\n     */\n    Incrementer.processRecordsByFields = function (records, query) {\n        var _this = this;\n        var fields = query.model.getIncrementFields();\n        Utils.forOwn(fields, function (_attr, key) {\n            _this.processRecords(records, query, key);\n        });\n    };\n    /**\n     * Process all records and increment all field that is defined as increment.\n     */\n    Incrementer.processRecords = function (records, query, key) {\n        var max = this.max(records, query, key);\n        Utils.forOwn(records, function (record) {\n            if (typeof record[key] !== 'number') {\n                record[key] = ++max;\n            }\n        });\n    };\n    /**\n     * Get the max value of the specified field with given data combined\n     * with existing records.\n     */\n    Incrementer.max = function (records, query, field) {\n        var maxInState = query.max(field);\n        var maxInRecord = Math.max.apply(Math, Utils.map(records, function (record) {\n            var id = record[field];\n            return typeof id === 'number' ? id : 0;\n        }));\n        return Math.max(maxInRecord, maxInState);\n    };\n    return Incrementer;\n}());\n\nvar Attacher = /** @class */ (function () {\n    function Attacher() {\n    }\n    /**\n     * Attach missing relational key to the records.\n     */\n    Attacher.process = function (query, data) {\n        Utils.forOwn(data, function (entity, name) {\n            var fields = query.getModel(name).fields();\n            Utils.forOwn(entity, function (record) {\n                Utils.forOwn(record, function (value, key) {\n                    var field = fields[key];\n                    if (field instanceof Relation) {\n                        field.attach(value, record, data);\n                    }\n                });\n            });\n        });\n        return data;\n    };\n    return Attacher;\n}());\n\nvar IdFixer = /** @class */ (function () {\n    function IdFixer() {\n    }\n    /**\n     * Fix all of the \"no key\" records with appropriate id value if it can.\n     */\n    IdFixer.process = function (query, data) {\n        var _this = this;\n        return Utils.mapValues(data, function (records, entity) {\n            var newQuery = query.newQuery(entity);\n            return _this.processRecords(records, newQuery);\n        });\n    };\n    /**\n     * Process records to Fix all of the \"no key\" records with\n     * appropriate id value if it can.\n     */\n    IdFixer.processRecords = function (records, query) {\n        return Object.keys(records).reduce(function (newRecords, id) {\n            var record = records[id];\n            var newId = query.model.id(record);\n            var newStringId = String(newId);\n            if (newId == null || id === newStringId) {\n                newRecords[id] = record;\n                return newRecords;\n            }\n            newRecords[newStringId] = __assign({}, record, { $id: newId });\n            return newRecords;\n        }, {});\n    };\n    return IdFixer;\n}());\n\nvar Processor = /** @class */ (function () {\n    function Processor() {\n    }\n    /**\n     * Normalize the given data.\n     */\n    Processor.normalize = function (query, record) {\n        // First, let's normalize the data.\n        var data = Normalizer.process(query, record);\n        // Next, increment any field that defined with `increment` attribute.\n        data = Incrementer.process(query, data);\n        // Then, attach any missing foreign keys. For example, if a User has many\n        // Post nested but without foreign key such as `user_id`, we can attach\n        // the `user_id` value to the Post entities.\n        data = Attacher.process(query, data);\n        // Now we'll create any missing pivot entities for relationships such as\n        // `belongsTo` or `morphMany`.\n        data = PivotCreator.process(query, data);\n        // There might be new pivot entities now which weren't there before, and\n        // it might contain increment field so we must increment those filed\n        // again here.\n        //\n        // Improvements: This double incrementing process can be improved. Since\n        // currently, we're looping whole records twice. If we could remember the\n        // entities which were already incremented at an earlier stage, we could\n        // only process the newly created entities.\n        data = Incrementer.process(query, data);\n        // Finally, let's fix key id for the entities since the id value might\n        // have changed due to the incrementing process.\n        data = IdFixer.process(query, data);\n        // And we'll return the result as a normalized data.\n        return data;\n    };\n    return Processor;\n}());\n\nvar WhereFilter = /** @class */ (function () {\n    function WhereFilter() {\n    }\n    /**\n     * Filter the given data by registered where clause.\n     */\n    WhereFilter.filter = function (query, records) {\n        var _this = this;\n        if (query.wheres.length === 0) {\n            return records;\n        }\n        return records.filter(function (record) { return _this.check(query, record); });\n    };\n    /**\n     * Checks if given Record matches the registered where clause.\n     */\n    WhereFilter.check = function (query, record) {\n        var whereTypes = Utils.groupBy(query.wheres, function (where) { return where.boolean; });\n        var comparator = this.getComparator(query, record);\n        var results = [];\n        whereTypes.and && results.push(whereTypes.and.every(comparator));\n        whereTypes.or && results.push(whereTypes.or.some(comparator));\n        return results.indexOf(true) !== -1;\n    };\n    /**\n     * Get comparator for the where clause.\n     */\n    WhereFilter.getComparator = function (query, record) {\n        var _this = this;\n        return function (where) {\n            // Function with Record and Query as argument.\n            if (typeof where.field === 'function') {\n                var newQuery = new Query(query.rootState, query.entity);\n                var result = _this.executeWhereClosure(newQuery, record, where.field);\n                if (typeof result === 'boolean') {\n                    return result;\n                }\n                // If closure returns undefined, we need to execute the local query\n                var matchingRecords = newQuery.get();\n                // And check if current record is part of the resul\n                return !Utils.isEmpty(matchingRecords.filter(function (rec) {\n                    return rec['$id'] === record['$id'];\n                }));\n            }\n            // Function with Record value as argument.\n            if (typeof where.value === 'function') {\n                return where.value(record[where.field]);\n            }\n            // Check if field value is in given where Array.\n            if (Array.isArray(where.value)) {\n                return where.value.indexOf(record[where.field]) !== -1;\n            }\n            // Simple equal check.\n            return record[where.field] === where.value;\n        };\n    };\n    /**\n     * Execute where closure.\n     */\n    WhereFilter.executeWhereClosure = function (query, record, closure) {\n        if (closure.length !== 3) {\n            return closure(record, query);\n        }\n        var model = new query.model(record);\n        return closure(record, query, model);\n    };\n    return WhereFilter;\n}());\n\nvar OrderByFilter = /** @class */ (function () {\n    function OrderByFilter() {\n    }\n    /**\n     * Sort the given data by registered orders.\n     */\n    OrderByFilter.filter = function (query, records) {\n        if (query.orders.length === 0) {\n            return records;\n        }\n        var keys = query.orders.map(function (order) { return order.field; });\n        var directions = query.orders.map(function (order) { return order.direction; });\n        return Utils.orderBy(records, keys, directions);\n    };\n    return OrderByFilter;\n}());\n\nvar LimitFilter = /** @class */ (function () {\n    function LimitFilter() {\n    }\n    /**\n     * Limit the given records by the lmilt and offset.\n     */\n    LimitFilter.filter = function (query, records) {\n        return records.slice(query.offsetNumber, query.offsetNumber + query.limitNumber);\n    };\n    return LimitFilter;\n}());\n\nvar Filter = /** @class */ (function () {\n    function Filter() {\n    }\n    /**\n     * Filter the given data by registered where clause.\n     */\n    Filter.where = function (query, records) {\n        return WhereFilter.filter(query, records);\n    };\n    /**\n     * Sort the given data by registered orders.\n     */\n    Filter.orderBy = function (query, records) {\n        return OrderByFilter.filter(query, records);\n    };\n    /**\n     * Limit the given records by the lmilt and offset.\n     */\n    Filter.limit = function (query, records) {\n        return LimitFilter.filter(query, records);\n    };\n    return Filter;\n}());\n\nvar Loader = /** @class */ (function () {\n    function Loader() {\n    }\n    /**\n     * Set the relationships that should be eager loaded with the query.\n     */\n    Loader.with = function (query, name, constraint) {\n        var _this = this;\n        // If the name of the relation is `*`, we'll load all relationships.\n        if (name === '*') {\n            this.withAll(query);\n            return;\n        }\n        // If we passed an array, we dispatch the bits to with queries\n        if (name instanceof Array) {\n            name.forEach(function (relationName) { return _this.with(query, relationName, constraint); });\n        }\n        else {\n            // Else parse relations and set appropriate constraints.\n            this.parseWithRelations(query, name.split('.'), constraint);\n        }\n    };\n    /**\n     * Set all relationships to be eager loaded with the query.\n     */\n    Loader.withAll = function (query, constraint) {\n        if (constraint === void 0) { constraint = function () { return null; }; }\n        var fields = query.model.getFields();\n        for (var field in fields) {\n            fields[field] instanceof Relation && this.with(query, field, constraint);\n        }\n    };\n    /**\n     * Set relationships to be recursively eager loaded with the query.\n     */\n    Loader.withAllRecursive = function (query, depth) {\n        this.withAll(query, function (relatedQuery) {\n            depth > 0 && relatedQuery.withAllRecursive(depth - 1);\n        });\n    };\n    /**\n     * Set eager load relation and constraint.\n     */\n    Loader.setEagerLoad = function (query, name, constraint) {\n        if (constraint === void 0) { constraint = null; }\n        if (!query.load[name]) {\n            query.load[name] = [];\n        }\n        constraint && query.load[name].push(constraint);\n    };\n    /**\n     * Parse a list of relations into individuals.\n     */\n    Loader.parseWithRelations = function (query, relations, constraint) {\n        var _this = this;\n        // First we'll get the very first relationship from teh whole relations.\n        var relation = relations[0];\n        // If the first relation has \"or\" syntax which is `|` for example\n        // `posts|videos`, set each of them as separate eager load.\n        relation.split('|').forEach(function (name) {\n            // If there's only one relationship in relations array, that means\n            // there's no nested relationship. So we'll set the given\n            // constraint to the relationship loading.\n            if (relations.length === 1) {\n                _this.setEagerLoad(query, name, constraint);\n                return;\n            }\n            // Else we'll skip adding constraint because the constraint has to be\n            // applied to the nested relationship. We'll let `addNestedWiths`\n            // method to handle that later.\n            _this.setEagerLoad(query, name);\n        });\n        // If the given relations only contains a single name, which means it\n        // doesn't have any nested relations such as `posts.comments`, we\n        // don't need go farther so return here.\n        if (relations.length === 1) {\n            return;\n        }\n        // Finally, we shift the first relation from the array and handle lest\n        // of relations as a nested relation.\n        relations.shift();\n        this.addNestedWiths(query, relation, relations, constraint);\n    };\n    /**\n     * Parse the nested relationships in a relation.\n     */\n    Loader.addNestedWiths = function (query, name, children, constraint) {\n        this.setEagerLoad(query, name, function (nestedQuery) {\n            nestedQuery.with(children.join('.'), constraint);\n        });\n    };\n    /**\n     * Eager load the relationships for the given collection.\n     */\n    Loader.eagerLoadRelations = function (query, collection) {\n        var fields = query.model.getFields();\n        for (var name_1 in query.load) {\n            var constraints = query.load[name_1];\n            var relation = fields[name_1];\n            if (relation instanceof Relation) {\n                relation.load(query, collection, name_1, constraints);\n                continue;\n            }\n            // If no relation was found on the query, it might be run on the\n            // base entity of a hierarchy. In this case, we try looking up\n            // the relation on the derived entities\n            if (query.model.hasTypes()) {\n                var candidateRelation = query.model.findRelationInSubTypes(name_1);\n                if (candidateRelation !== null) {\n                    candidateRelation.load(query, collection, name_1, constraints);\n                }\n            }\n        }\n    };\n    return Loader;\n}());\n\nvar Rollcaller = /** @class */ (function () {\n    function Rollcaller() {\n    }\n    /**\n     * Set where constraint based on relationship existence.\n     */\n    Rollcaller.has = function (query, relation, operator, count) {\n        this.setHas(query, relation, 'exists', operator, count);\n    };\n    /**\n     * Set where constraint based on relationship absence.\n     */\n    Rollcaller.hasNot = function (query, relation, operator, count) {\n        this.setHas(query, relation, 'doesntExist', operator, count);\n    };\n    /**\n     * Add where has condition.\n     */\n    Rollcaller.whereHas = function (query, relation, constraint) {\n        this.setHas(query, relation, 'exists', undefined, undefined, constraint);\n    };\n    /**\n     * Add where has not condition.\n     */\n    Rollcaller.whereHasNot = function (query, relation, constraint) {\n        this.setHas(query, relation, 'doesntExist', undefined, undefined, constraint);\n    };\n    /**\n     * Set `has` condition.\n     */\n    Rollcaller.setHas = function (query, relation, type, operator, count, constraint) {\n        if (operator === void 0) { operator = '>='; }\n        if (count === void 0) { count = 1; }\n        if (constraint === void 0) { constraint = null; }\n        if (typeof operator === 'number') {\n            query.have.push({ relation: relation, type: type, operator: '>=', count: operator, constraint: constraint });\n            return;\n        }\n        query.have.push({ relation: relation, type: type, operator: operator, count: count, constraint: constraint });\n    };\n    /**\n     * Convert `has` conditions to where clause. It will check any relationship\n     * existence, or absence for the records then set ids of the records that\n     * matched the condition to `where` clause.\n     *\n     * This way, when the query gets executed, only those records that matched\n     * the `has` condition get retrieved. In the future, once relationship index\n     * mapping is implemented, we can simply do all checks inside the where\n     * filter since we can treat `has` condition as usual `where` condition.\n     *\n     * For now, since we must fetch any relationship by eager loading them, due\n     * to performance concern, we'll apply `has` conditions this way to gain\n     * maximum performance.\n     */\n    Rollcaller.applyConstraints = function (query) {\n        if (query.have.length === 0) {\n            return;\n        }\n        var newQuery = query.newQuery();\n        this.addHasWhereConstraints(query, newQuery);\n        this.addHasConstraints(query, newQuery.get());\n    };\n    /**\n     * Add has constraints to the given query. It's going to set all relationship\n     * as `with` alongside with its closure constraints.\n     */\n    Rollcaller.addHasWhereConstraints = function (query, newQuery) {\n        query.have.forEach(function (constraint) {\n            newQuery.with(constraint.relation, constraint.constraint);\n        });\n    };\n    /**\n     * Add has constraints as where clause.\n     */\n    Rollcaller.addHasConstraints = function (query, collection) {\n        var comparators = this.getComparators(query);\n        var ids = [];\n        collection.forEach(function (model) {\n            if (comparators.every(function (comparator) { return comparator(model); })) {\n                ids.push(model.$id);\n            }\n        });\n        query.whereIdIn(ids);\n    };\n    /**\n     * Get comparators for the has clause.\n     */\n    Rollcaller.getComparators = function (query) {\n        var _this = this;\n        return query.have.map(function (constraint) { return _this.getComparator(constraint); });\n    };\n    /**\n     * Get a comparator for the has clause.\n     */\n    Rollcaller.getComparator = function (constraint) {\n        var _this = this;\n        var compare = this.getCountComparator(constraint.operator);\n        return function (model) {\n            var count = _this.getRelationshipCount(model[constraint.relation]);\n            var result = compare(count, constraint.count);\n            return constraint.type === 'exists' ? result : !result;\n        };\n    };\n    /**\n     * Get count of the relationship.\n     */\n    Rollcaller.getRelationshipCount = function (relation) {\n        if (Array.isArray(relation)) {\n            return relation.length;\n        }\n        return relation ? 1 : 0;\n    };\n    /**\n     * Get comparator function for the `has` clause.\n     */\n    Rollcaller.getCountComparator = function (operator) {\n        switch (operator) {\n            case '=':\n                return function (x, y) { return x === y; };\n            case '>':\n                return function (x, y) { return x > y; };\n            case '>=':\n                return function (x, y) { return x >= y; };\n            case '<':\n                return function (x, y) { return x > 0 && x < y; };\n            case '<=':\n                return function (x, y) { return x > 0 && x <= y; };\n            default:\n                return function (x, y) { return x === y; };\n        }\n    };\n    return Rollcaller;\n}());\n\nvar Hook = /** @class */ (function () {\n    /**\n     * Create a lidecycle hook instance.\n     */\n    function Hook(query) {\n        /**\n         * The global hook index to be deleted.\n         */\n        this.indexToBeDeleted = [];\n        this.query = query;\n    }\n    /**\n     * Register a callback. It Returns unique ID for registered callback.\n     */\n    Hook.on = function (on, callback, once) {\n        if (once === void 0) { once = false; }\n        var uid = this.lastHookId + 1;\n        this.lastHookId = uid;\n        if (!this.hooks[on]) {\n            this.hooks[on] = [];\n        }\n        this.hooks[on].push({ callback: callback, once: once, uid: uid });\n        return uid;\n    };\n    /**\n     * Remove hook registration.\n     */\n    Hook.off = function (uid) {\n        var _this = this;\n        var removed = false;\n        Object.keys(this.hooks).some(function (on) {\n            var hook = _this.hooks[on];\n            var index = hook.findIndex(function (h) { return h.uid === uid; });\n            if (index !== -1) {\n                hook.splice(index, 1);\n                removed = true;\n            }\n            return removed;\n        });\n        return removed;\n    };\n    /**\n     * Get the hook class.\n     */\n    Hook.prototype.self = function () {\n        return this.constructor;\n    };\n    /**\n     * Get the hook for the given name.\n     */\n    Hook.prototype.getHook = function (name) {\n        var hook = this.query.model[name];\n        return hook || null;\n    };\n    /**\n     * Get the global hook.\n     */\n    Hook.prototype.getGlobalHook = function (name) {\n        var hook = this.self().hooks[name];\n        return hook || null;\n    };\n    /**\n     * Check if the given hook exist.\n     */\n    Hook.prototype.has = function (name) {\n        return !!this.getHook(name) || !!this.getGlobalHook(name);\n    };\n    /**\n     * Execute select hook for the given collection.\n     */\n    Hook.prototype.executeSelectHook = function (on, records) {\n        if (!this.has(on)) {\n            return records;\n        }\n        records = this.executeLocalSelectHook(on, records);\n        records = this.executeGlobalSelectHook(on, records);\n        return records;\n    };\n    /**\n     * Execute select hook against given records.\n     */\n    Hook.prototype.executeLocalSelectHook = function (on, records) {\n        var hook = this.getHook(on);\n        if (!hook) {\n            return records;\n        }\n        return hook(records, this.query.entity);\n    };\n    /**\n     * Execute the global select hook against given records.\n     */\n    Hook.prototype.executeGlobalSelectHook = function (on, records) {\n        var _this = this;\n        var hooks = this.getGlobalHook(on);\n        if (!hooks) {\n            return records;\n        }\n        // Track indexes to delete.\n        var deleteHookIndexes = [];\n        // Loop all hooks.\n        hooks.forEach(function (hook, hookIndex) {\n            var callback = hook.callback, once = hook.once;\n            records = callback.call(_this.query, records, _this.query.entity);\n            // Add hook index to delete.\n            once && deleteHookIndexes.push(hookIndex);\n        });\n        // Remove hooks to be deleted in reverse order.\n        deleteHookIndexes.reverse().forEach(function (hookIndex) {\n            hooks.splice(hookIndex, 1);\n        });\n        return records;\n    };\n    /**\n     * Execute the callback for all given records.\n     */\n    Hook.prototype.executeMutationHookOnRecords = function (on, records) {\n        var _this = this;\n        if (!this.has(on)) {\n            return;\n        }\n        Object.keys(records).forEach(function (id) {\n            var result = _this.executeMutationHook(on, records[id]);\n            if (result === false) {\n                delete records[id];\n            }\n        });\n        this.removeGlobalHook(on);\n    };\n    /**\n     * Execute mutation hook against given model.\n     */\n    Hook.prototype.executeMutationHook = function (on, model) {\n        if (this.executeLocalMutationHook(on, model) === false) {\n            return false;\n        }\n        if (this.executeGlobalMutationHook(on, model) === false) {\n            return false;\n        }\n    };\n    /**\n     * Execute the local mutation hook.\n     */\n    Hook.prototype.executeLocalMutationHook = function (on, model) {\n        var hook = this.getHook(on);\n        if (!hook) {\n            return;\n        }\n        return hook(model, this.query.entity);\n    };\n    /**\n     * Execute the global mutation hook.\n     */\n    Hook.prototype.executeGlobalMutationHook = function (on, model) {\n        var _this = this;\n        var hooks = this.getGlobalHook(on);\n        if (!hooks) {\n            return;\n        }\n        // Track results.\n        var results = [];\n        // Loop all hooks.\n        hooks.forEach(function (hook, index) {\n            results.push(hook.callback.call(_this.query, model, _this.query.entity));\n            // Add hook index to delete.\n            hook.once && _this.indexToBeDeleted.push(index);\n        });\n        if (results.includes(false)) {\n            return false;\n        }\n    };\n    /**\n     * Remove global hooks which are executed and defined as once.\n     */\n    Hook.prototype.removeGlobalHook = function (on) {\n        var hooks = this.getGlobalHook(on);\n        if (!hooks) {\n            return;\n        }\n        this.indexToBeDeleted.reverse().forEach(function (index) { hooks.splice(index, 1); });\n    };\n    /**\n     * Global lifecycle hooks for the query.\n     */\n    Hook.hooks = {};\n    /**\n     * Hook UID counter.\n     */\n    Hook.lastHookId = 0;\n    return Hook;\n}());\n\nvar Query = /** @class */ (function () {\n    /**\n     * Create a new Query instance.\n     */\n    function Query(state, entity) {\n        /**\n         * Primary key ids to filter records by. It is used for filtering records\n         * direct key lookup when a user is trying to fetch records by its\n         * primary key.\n         *\n         * It should not be used if there is a logic which prevents index usage, for\n         * example, an \"or\" condition which already requires a full scan of records.\n         */\n        this.idFilter = null;\n        /**\n         * Whether to use `idFilter` key lookup. True if there is a logic which\n         * prevents index usage, for example, an \"or\" condition which already\n         * requires full scan.\n         */\n        this.cancelIdFilter = false;\n        /**\n         * Primary key ids to filter joined records. It is used for filtering\n         * records direct key lookup. It should not be cancelled, because it\n         * is free from the effects of normal where methods.\n         */\n        this.joinedIdFilter = null;\n        /**\n         * The where constraints for the query.\n         */\n        this.wheres = [];\n        /**\n         * The has constraints for the query.\n         */\n        this.have = [];\n        /**\n         * The orders of the query result.\n         */\n        this.orders = [];\n        /**\n         * Number of results to skip.\n         */\n        this.offsetNumber = 0;\n        /**\n         * Maximum number of records to return.\n         *\n         * We use polyfill of `Number.MAX_SAFE_INTEGER` for IE11 here.\n         */\n        this.limitNumber = Math.pow(2, 53) - 1;\n        /**\n         * The relationships that should be eager loaded with the result.\n         */\n        this.load = {};\n        /**\n         * This flag lets us know if current Query instance applies to\n         * a base class or not (in order to know when to filter out some\n         * records)\n         */\n        this.appliedOnBase = true;\n        // All entitites with same base class are stored in the same state\n        var baseModel = this.getBase(entity);\n        this.state = state[baseModel.entity];\n        this.appliedOnBase = baseModel.entity === entity;\n        this.rootState = state;\n        this.entity = entity;\n        this.model = this.getModel(entity);\n        this.module = this.getModule(entity);\n        this.hook = new Hook(this);\n    }\n    /**\n     * Get the database from the container.\n     */\n    Query.database = function () {\n        return Container.database;\n    };\n    /**\n     * Get model of given name from the container.\n     */\n    Query.getModel = function (name) {\n        return this.database().model(name);\n    };\n    /**\n     * Get base model of given name from the container.\n     */\n    Query.getBase = function (name) {\n        return this.database().baseModel(name);\n    };\n    /**\n     * Get all models from the container.\n     */\n    Query.getModels = function () {\n        return this.database().models();\n    };\n    /**\n     * Get module of given name from the container.\n     */\n    Query.getModule = function (name) {\n        return this.database().module(name);\n    };\n    /**\n     * Get all modules from the container.\n     */\n    Query.getModules = function () {\n        return this.database().modules();\n    };\n    /**\n     * Delete all records from the state.\n     */\n    Query.deleteAll = function (state) {\n        var _this = this;\n        var models = this.getModels();\n        Utils.forOwn(models, function (_model, name) {\n            state[name] && (new _this(state, name)).deleteAll();\n        });\n    };\n    /**\n     * Register a callback. It Returns unique ID for registered callback.\n     */\n    Query.on = function (on, callback, once) {\n        return Hook.on(on, callback, once);\n    };\n    /**\n     * Remove hook registration.\n     */\n    Query.off = function (uid) {\n        return Hook.off(uid);\n    };\n    /**\n     * Get query class.\n     */\n    Query.prototype.self = function () {\n        return this.constructor;\n    };\n    /**\n     * Create a new query instance.\n     */\n    Query.prototype.newQuery = function (entity) {\n        entity = entity || this.entity;\n        return (new Query(this.rootState, entity));\n    };\n    /**\n     * Get the database from the container.\n     */\n    Query.prototype.database = function () {\n        return this.self().database();\n    };\n    /**\n     * Get model of given name from the container.\n     */\n    Query.prototype.getModel = function (name) {\n        var entity = name || this.entity;\n        return this.self().getModel(entity);\n    };\n    /**\n     * Get all models from the container.\n     */\n    Query.prototype.getModels = function () {\n        return this.self().getModels();\n    };\n    /**\n     * Get base model of given name from the container.\n     */\n    Query.prototype.getBase = function (name) {\n        return this.self().getBase(name);\n    };\n    /**\n     * Get module of given name from the container.\n     */\n    Query.prototype.getModule = function (name) {\n        var entity = name || this.entity;\n        return this.self().getModule(entity);\n    };\n    /**\n     * Get all modules from the container.\n     */\n    Query.prototype.getModules = function () {\n        return this.self().getModules();\n    };\n    /**\n     * Returns all record of the query chain result. This method is alias\n     * of the `get` method.\n     */\n    Query.prototype.all = function () {\n        return this.get();\n    };\n    /**\n     * Get the record of the given id.\n     */\n    Query.prototype.find = function (id) {\n        return this.item(this.state.data[id]); // TODO: Delete \"as ...\" when model type coverage reaches 100%.\n    };\n    /**\n     * Get the record of the given array of ids.\n     */\n    Query.prototype.findIn = function (idList) {\n        var _this = this;\n        return idList.map(function (id) { return _this.state.data[id]; }).filter(function (item) { return item; }); // TODO: Delete \"as ...\" when model type coverage reaches 100%.\n    };\n    /**\n     * Returns all record of the query chain result.\n     */\n    Query.prototype.get = function () {\n        var records = this.select();\n        return this.collect(records); // TODO: Delete \"as ...\" when model type coverage reaches 100%.\n    };\n    /**\n     * Returns the first record of the query chain result.\n     */\n    Query.prototype.first = function () {\n        var records = this.select();\n        return this.item(records[0]); // TODO: Delete \"as ...\" when model type coverage reaches 100%.\n    };\n    /**\n     * Returns the last single record of the query chain result.\n     */\n    Query.prototype.last = function () {\n        var records = this.select();\n        return this.item(records[records.length - 1]); // TODO: Delete \"as ...\" when model type coverage reaches 100%.\n    };\n    /**\n     * Add a and where clause to the query.\n     */\n    Query.prototype.where = function (field, value) {\n        if (this.isIdfilterable(field)) {\n            this.setIdFilter(value);\n        }\n        this.wheres.push({ field: field, value: value, boolean: 'and' });\n        return this;\n    };\n    /**\n     * Add a or where clause to the query.\n     */\n    Query.prototype.orWhere = function (field, value) {\n        // Cacncel id filter usage, since \"or\" needs full scan.\n        this.cancelIdFilter = true;\n        this.wheres.push({ field: field, value: value, boolean: 'or' });\n        return this;\n    };\n    /**\n     * Filter records by their primary key.\n     */\n    Query.prototype.whereId = function (value) {\n        return this.where(this.model.primaryKey, value);\n    };\n    /**\n     * Filter records by their primary keys.\n     */\n    Query.prototype.whereIdIn = function (values) {\n        return this.where(this.model.primaryKey, values);\n    };\n    /**\n     * Fast comparison for foreign keys. If the foreign key is the primary key,\n     * it uses object lookup, fallback normal where otherwise.\n     *\n     * Why separate `whereFk` instead of just `where`? Additional logic needed\n     * for the distinction between where and orWhere in normal queries, but\n     * Fk lookups are always \"and\" type.\n     */\n    Query.prototype.whereFk = function (field, value) {\n        var values = Array.isArray(value) ? value : [value];\n        // If lookup filed is the primary key. Initialize or get intersection,\n        // because boolean and could have a condition such as\n        // `whereId(1).whereId(2).get()`.\n        if (field === this.model.primaryKey) {\n            this.setJoinedIdFilter(values);\n            return this;\n        }\n        // Else fallback to normal where.\n        this.where(field, values);\n        return this;\n    };\n    /**\n     * Check whether the given field and value combination is filterable through\n     * primary key direct look up.\n     */\n    Query.prototype.isIdfilterable = function (field) {\n        return field === this.model.primaryKey && !this.cancelIdFilter;\n    };\n    /**\n     * Set id filter for the given where condition.\n     */\n    Query.prototype.setIdFilter = function (value) {\n        var _this = this;\n        var values = Array.isArray(value) ? value : [value];\n        // Initialize or get intersection, because boolean and could have a\n        // condition such as `whereIdIn([1,2,3]).whereIdIn([1,2]).get()`.\n        if (this.idFilter === null) {\n            this.idFilter = new Set(values);\n            return;\n        }\n        this.idFilter = new Set(values.filter(function (v) { return _this.idFilter.has(v); }));\n    };\n    /**\n     * Set joined id filter for the given where condition.\n     */\n    Query.prototype.setJoinedIdFilter = function (values) {\n        var _this = this;\n        // Initialize or get intersection, because boolean and could have a\n        // condition such as `whereId(1).whereId(2).get()`.\n        if (this.joinedIdFilter === null) {\n            this.joinedIdFilter = new Set(values);\n            return;\n        }\n        this.joinedIdFilter = new Set(values.filter(function (v) { return _this.joinedIdFilter.has(v); }));\n    };\n    /**\n     * Add an order to the query.\n     */\n    Query.prototype.orderBy = function (field, direction) {\n        if (direction === void 0) { direction = 'asc'; }\n        this.orders.push({ field: field, direction: direction });\n        return this;\n    };\n    /**\n     * Add an offset to the query.\n     */\n    Query.prototype.offset = function (offset) {\n        this.offsetNumber = offset;\n        return this;\n    };\n    /**\n     * Add limit to the query.\n     */\n    Query.prototype.limit = function (limit) {\n        this.limitNumber = limit;\n        return this;\n    };\n    /**\n     * Set the relationships that should be loaded.\n     */\n    Query.prototype.with = function (name, constraint) {\n        if (constraint === void 0) { constraint = null; }\n        Loader.with(this, name, constraint);\n        return this;\n    };\n    /**\n     * Query all relations.\n     */\n    Query.prototype.withAll = function () {\n        Loader.withAll(this);\n        return this;\n    };\n    /**\n     * Query all relations recursively.\n     */\n    Query.prototype.withAllRecursive = function (depth) {\n        if (depth === void 0) { depth = 3; }\n        Loader.withAllRecursive(this, depth);\n        return this;\n    };\n    /**\n     * Set where constraint based on relationship existence.\n     */\n    Query.prototype.has = function (relation, operator, count) {\n        Rollcaller.has(this, relation, operator, count);\n        return this;\n    };\n    /**\n     * Set where constraint based on relationship absence.\n     */\n    Query.prototype.hasNot = function (relation, operator, count) {\n        Rollcaller.hasNot(this, relation, operator, count);\n        return this;\n    };\n    /**\n     * Add where has condition.\n     */\n    Query.prototype.whereHas = function (relation, constraint) {\n        Rollcaller.whereHas(this, relation, constraint);\n        return this;\n    };\n    /**\n     * Add where has not condition.\n     */\n    Query.prototype.whereHasNot = function (relation, constraint) {\n        Rollcaller.whereHasNot(this, relation, constraint);\n        return this;\n    };\n    /**\n     * Get all records from the state and convert them into the array. It will\n     * check if the record is an instance of Model and if not, it will\n     * instantiate before returning them.\n     *\n     * This is needed to support SSR, that when the state is hydrated at server\n     * side, it will be converted to the plain record at the client side.\n     */\n    Query.prototype.records = function () {\n        var _this = this;\n        this.finalizeIdFilter();\n        return this.getIdsToLookup()\n            .map(function (id) {\n            var model = _this.state.data[id];\n            // Getting the typed instance\n            var hydrated = model instanceof Model ? model : _this.hydrate(model);\n            // And ignoring if needed\n            if (!_this.appliedOnBase && !(hydrated instanceof _this.model)) {\n                return null;\n            }\n            return hydrated;\n        })\n            .filter(function (record) {\n            return record !== null;\n        });\n    };\n    /**\n     * Check whether if id filters should on select. If not, clear out id filter.\n     */\n    Query.prototype.finalizeIdFilter = function () {\n        if (!this.cancelIdFilter || this.idFilter === null) {\n            return;\n        }\n        this.where(this.model.primaryKey, Array.from(this.idFilter.values()));\n        this.idFilter = null;\n    };\n    /**\n     * Get a list of id that should be used to lookup when fetching records\n     * from the state.\n     */\n    Query.prototype.getIdsToLookup = function () {\n        var _this = this;\n        // If both id filter and joined id filter are set, intersect them.\n        if (this.idFilter && this.joinedIdFilter) {\n            return Array.from(this.idFilter.values()).filter(function (id) {\n                return _this.joinedIdFilter.has(id);\n            });\n        }\n        // If only either one is set, return which one is set.\n        if (this.idFilter || this.joinedIdFilter) {\n            return Array.from((this.idFilter || this.joinedIdFilter).values());\n        }\n        // If none is set, return all keys.\n        return Object.keys(this.state.data);\n    };\n    /**\n     * Process the query and filter data.\n     */\n    Query.prototype.select = function () {\n        // At first, well apply any `has` condition to the query.\n        Rollcaller.applyConstraints(this);\n        // Next, get all record as an array and then start filtering it through.\n        var records = this.records();\n        // Process `beforeProcess` hook.\n        records = this.hook.executeSelectHook('beforeSelect', records);\n        // Let's filter the records at first by the where clauses.\n        records = this.filterWhere(records);\n        // Process `afterWhere` hook.\n        records = this.hook.executeSelectHook('afterWhere', records);\n        // Next, lets sort the data.\n        records = this.filterOrderBy(records);\n        // Process `afterOrderBy` hook.\n        records = this.hook.executeSelectHook('afterOrderBy', records);\n        // Finally, slice the record by limit and offset.\n        records = this.filterLimit(records);\n        // Process `afterLimit` hook.\n        records = this.hook.executeSelectHook('afterLimit', records);\n        return records; // TODO: Delete \"as ...\" when model type coverage reaches 100%.\n    };\n    /**\n     * Filter the given data by registered where clause.\n     */\n    Query.prototype.filterWhere = function (records) {\n        return Filter.where(this, records);\n    };\n    /**\n     * Sort the given data by registered orders.\n     */\n    Query.prototype.filterOrderBy = function (records) {\n        return Filter.orderBy(this, records);\n    };\n    /**\n     * Limit the given records by the lmilt and offset.\n     */\n    Query.prototype.filterLimit = function (records) {\n        return Filter.limit(this, records);\n    };\n    /**\n     * Get the count of the retrieved data.\n     */\n    Query.prototype.count = function () {\n        return this.get().length;\n    };\n    /**\n     * Get the max value of the specified filed.\n     */\n    Query.prototype.max = function (field) {\n        var numbers = this.get().reduce(function (numbers, item) {\n            if (typeof item[field] === 'number') {\n                numbers.push(item[field]);\n            }\n            return numbers;\n        }, []);\n        return numbers.length === 0 ? 0 : Math.max.apply(Math, numbers);\n    };\n    /**\n     * Get the min value of the specified filed.\n     */\n    Query.prototype.min = function (field) {\n        var numbers = this.get().reduce(function (numbers, item) {\n            if (typeof item[field] === 'number') {\n                numbers.push(item[field]);\n            }\n            return numbers;\n        }, []);\n        return numbers.length === 0 ? 0 : Math.min.apply(Math, numbers);\n    };\n    /**\n     * Get the sum value of the specified filed.\n     */\n    Query.prototype.sum = function (field) {\n        return this.get().reduce(function (sum, item) {\n            if (typeof item[field] === 'number') {\n                sum += item[field];\n            }\n            return sum;\n        }, 0);\n    };\n    /**\n     * Create a item from given record.\n     */\n    Query.prototype.item = function (item) {\n        if (!item) {\n            return null;\n        }\n        if (Object.keys(this.load).length > 0) {\n            var model = this.model.getModelFromRecord(item);\n            item = new model(item);\n            var items = this.hook.executeSelectHook('beforeRelations', [item]);\n            item = items[0];\n            Loader.eagerLoadRelations(this, [item]);\n            items = this.hook.executeSelectHook('afterRelations', [item]);\n            item = items[0];\n        }\n        return item;\n    };\n    /**\n     * Create a collection (array) from given records.\n     */\n    Query.prototype.collect = function (collection) {\n        var _this = this;\n        if (collection.length < 1) {\n            return [];\n        }\n        if (Object.keys(this.load).length > 0) {\n            collection = collection.map(function (item) {\n                var model = _this.model.getModelFromRecord(item);\n                return new model(item);\n            });\n            collection = this.hook.executeSelectHook('beforeRelations', collection);\n            Loader.eagerLoadRelations(this, collection);\n            collection = this.hook.executeSelectHook('afterRelations', collection);\n        }\n        return collection;\n    };\n    /**\n     * Create new data with all fields filled by default values.\n     */\n    Query.prototype.new = function () {\n        var record = (new this.model()).$toJson();\n        var result = this.insert(record, {});\n        return result[this.entity][0];\n    };\n    /**\n     * Save given data to the store by replacing all existing records in the\n     * store. If you want to save data without replacing existing records,\n     * use the `insert` method instead.\n     */\n    Query.prototype.create = function (data, options) {\n        return this.persist(data, 'create', options); // TODO: Delete \"as ...\" when model type coverage reaches 100%.\n    };\n    /**\n     * Create records to the state.\n     */\n    Query.prototype.createMany = function (records) {\n        var _this = this;\n        var instances = this.hydrateMany(records);\n        var createCallback = function () {\n            _this.emptyState();\n            _this.state.data = __assign({}, _this.state.data, instances);\n        };\n        this.commit('create', instances, createCallback);\n        return this.map(instances); // TODO: Delete \"as ...\" when model type coverage reaches 100%.\n    };\n    /**\n     * Insert given data to the state. Unlike `create`, this method will not\n     * remove existing data within the state, but it will update the data\n     * with the same primary key.\n     */\n    Query.prototype.insert = function (data, options) {\n        return this.persist(data, 'insert', options); // TODO: Delete \"as ...\" when model type coverage reaches 100%.\n    };\n    /**\n     * Insert list of records in the state.\n     */\n    Query.prototype.insertMany = function (records) {\n        var _this = this;\n        var instances = this.hydrateMany(records);\n        this.commit('create', instances, function () {\n            _this.state.data = __assign({}, _this.state.data, instances);\n        });\n        return this.map(instances); // TODO: Delete \"as ...\" when model type coverage reaches 100%.\n    };\n    /**\n     * Update data in the state.\n     */\n    Query.prototype.update = function (data, condition, options) {\n        // If the data is array, simply normalize the data and update them.\n        if (Array.isArray(data)) {\n            return this.persist(data, 'update', options);\n        }\n        // OK, the data is not an array. Now let's check `data` to see what we can\n        // do if it's a closure.\n        if (typeof data === 'function') {\n            // If the data is closure, but if there's no condition, we wouldn't know\n            // what record to update so raise an error and abort.\n            if (!condition) {\n                throw new Error('You must specify `where` to update records by specifying `data` as a closure.');\n            }\n            // If the condition is a closure, then update records by the closure.\n            if (typeof condition === 'function') {\n                return this.updateByCondition(data, condition);\n            }\n            // Else the condition is either String or Number, so let's\n            // update the record by ID.\n            return this.updateById(data, condition);\n        }\n        // Now the data is not a closure, and it's not an array, so it should be an object.\n        // If the condition is closure, we can't normalize the data so let's update\n        // records using the closure.\n        if (typeof condition === 'function') {\n            return this.updateByCondition(data, condition);\n        }\n        // If there's no condition, let's normalize the data and update them.\n        if (!condition) {\n            return this.persist(data, 'update', options);\n        }\n        // Now since the condition is either String or Number, let's check if the\n        // model's primary key is not a composite key. If yes, we can't set the\n        // condition as ID value for the record so throw an error and abort.\n        if (Array.isArray(this.model.primaryKey)) {\n            throw new Error(\"\\n        You can't specify `where` value as `string` or `number` when you\\n        have a composite key defined in your model. Please include composite\\n        keys to the `data` fields.\\n      \");\n        }\n        // Finally, let's add condition as the primary key of the object and\n        // then normalize them to update the records.\n        return this.updateById(data, condition);\n    };\n    /**\n     * Update all records.\n     */\n    Query.prototype.updateMany = function (records) {\n        var instances = this.combine(records);\n        return this.commitUpdate(instances); // TODO: Delete \"as ...\" when model type coverage reaches 100%.\n    };\n    /**\n     * Update the state by id.\n     */\n    Query.prototype.updateById = function (data, id) {\n        var _a;\n        id = typeof id === 'number' ? id.toString() : id;\n        var instance = this.state.data[id];\n        if (!instance) {\n            return null;\n        }\n        var instances = (_a = {},\n            _a[id] = this.processUpdate(data, instance),\n            _a);\n        this.commitUpdate(instances);\n        return instances[id];\n    };\n    /**\n     * Update the state by condition.\n     */\n    Query.prototype.updateByCondition = function (data, condition) {\n        var _this = this;\n        var instances = Object.keys(this.state.data).reduce(function (instances, id) {\n            var instance = _this.state.data[id];\n            if (!condition(instance)) {\n                return instances;\n            }\n            instances[id] = _this.processUpdate(data, instance);\n            return instances;\n        }, {});\n        return this.commitUpdate(instances);\n    };\n    /**\n     * Update the given record with given data.\n     */\n    Query.prototype.processUpdate = function (data, instance) {\n        if (typeof data === 'function') {\n            data(instance);\n            return instance;\n        }\n        // When the updated instance is not the base model, we tell te hydrate what model to use\n        if (instance.constructor !== this.model && instance instanceof Model) {\n            return this.hydrate(__assign({}, instance, data), instance.constructor);\n        }\n        return this.hydrate(__assign({}, instance, data));\n    };\n    /**\n     * Commit `update` to the state.\n     */\n    Query.prototype.commitUpdate = function (instances) {\n        var _this = this;\n        instances = this.updateIndexes(instances);\n        this.commit('update', instances, function () {\n            _this.state.data = __assign({}, _this.state.data, instances);\n        });\n        return this.map(instances);\n    };\n    /**\n     * Update the key of the instances. This is needed when a user updates\n     * record's primary key. We must then update the index key to\n     * correspond with new id value.\n     */\n    Query.prototype.updateIndexes = function (instances) {\n        var _this = this;\n        return Object.keys(instances).reduce(function (instances, key) {\n            var instance = instances[key];\n            var id = String(_this.model.id(instance));\n            if (key !== id) {\n                instance.$id = id;\n                instances[id] = instance;\n                delete instances[key];\n            }\n            return instances;\n        }, instances);\n    };\n    /**\n     * Insert or update given data to the state. Unlike `insert`, this method\n     * will not replace existing data within the state, but it will update only\n     * the submitted data with the same primary key.\n     */\n    Query.prototype.insertOrUpdate = function (data, options) {\n        return this.persist(data, 'insertOrUpdate', options); // TODO: Delete \"as ...\" when model type coverage reaches 100%.\n    };\n    /**\n     * Insert or update the records.\n     */\n    Query.prototype.insertOrUpdateMany = function (records) {\n        var _this = this;\n        var toBeInserted = {};\n        var toBeUpdated = {};\n        Object.keys(records).forEach(function (id) {\n            var record = records[id];\n            if (_this.state.data[id]) {\n                toBeUpdated[id] = record;\n                return;\n            }\n            toBeInserted[id] = record;\n        });\n        return this.insertMany(toBeInserted).concat(this.updateMany(toBeUpdated));\n    };\n    /**\n     * Persist data into the state.\n     */\n    Query.prototype.persist = function (data, method, options) {\n        var _this = this;\n        data = this.normalize(data);\n        if (Utils.isEmpty(data)) {\n            if (method === 'create') {\n                this.emptyState();\n            }\n            return {};\n        }\n        return Object.keys(data).reduce(function (collection, entity) {\n            var query = _this.newQuery(entity);\n            var persistMethod = _this.getPersistMethod(entity, method, options);\n            var records = query[persistMethod + \"Many\"](data[entity]);\n            if (records.length > 0) {\n                collection[entity] = records;\n            }\n            return collection;\n        }, {});\n    };\n    /**\n     * Get method for the persist.\n     */\n    Query.prototype.getPersistMethod = function (entity, method, options) {\n        if (options.create && options.create.includes(entity)) {\n            return 'create';\n        }\n        if (options.insert && options.insert.includes(entity)) {\n            return 'insert';\n        }\n        if (options.update && options.update.includes(entity)) {\n            return 'update';\n        }\n        if (options.insertOrUpdate && options.insertOrUpdate.includes(entity)) {\n            return 'insertOrUpdate';\n        }\n        return method;\n    };\n    /**\n     * Delete records from the state.\n     */\n    Query.prototype.delete = function (condition) {\n        if (typeof condition === 'function') {\n            return this.deleteByCondition(condition);\n        }\n        return this.deleteById(condition);\n    };\n    /**\n     * Delete a record by id.\n     */\n    Query.prototype.deleteById = function (id) {\n        var _a;\n        id = typeof id === 'number' ? id.toString() : id;\n        var instance = this.state.data[id];\n        if (!instance) {\n            return null;\n        }\n        var instances = (_a = {}, _a[id] = instance, _a);\n        var collection = this.commitDelete(instances);\n        return collection[0]; // TODO: Delete \"as ...\" when model type coverage reaches 100%.\n    };\n    /**\n     * Delete record by condition.\n     */\n    Query.prototype.deleteByCondition = function (condition) {\n        var _this = this;\n        var instances = Object.keys(this.state.data).reduce(function (records, id) {\n            var instance = _this.state.data[id];\n            if (!condition(instance)) {\n                return records;\n            }\n            records[id] = instance;\n            return records;\n        }, {});\n        return this.commitDelete(instances); // TODO: Delete \"as ...\" when model type coverage reaches 100%.\n    };\n    /**\n     * Delete all records from the state.\n     */\n    Query.prototype.deleteAll = function () {\n        var _this = this;\n        var instances = this.state.data;\n        // If we deleting all derived entities, we need to filter out entities which\n        // don't match\n        if (!this.appliedOnBase) {\n            instances = Object.keys(this.state.data).reduce(function (acc, id) {\n                if (_this.state.data[id] instanceof _this.model) {\n                    acc[id] = _this.state.data[id];\n                }\n                return acc;\n            }, {});\n        }\n        this.commitDelete(instances);\n    };\n    /**\n     * Commit `delete` to the state.\n     */\n    Query.prototype.commitDelete = function (instances) {\n        var _this = this;\n        this.commit('delete', instances, function () {\n            var ids = Object.keys(instances);\n            _this.state.data = Object.keys(_this.state.data).reduce(function (instances, id) {\n                if (!ids.includes(id)) {\n                    instances[id] = _this.state.data[id];\n                }\n                return instances;\n            }, {});\n        });\n        return this.map(instances);\n    };\n    /**\n     * Normalize the given data.\n     */\n    Query.prototype.normalize = function (data) {\n        return Processor.normalize(this, data);\n    };\n    /**\n     * Convert given record to the model instance.\n     */\n    Query.prototype.hydrate = function (record, forceModel) {\n        if (forceModel !== undefined) {\n            return new forceModel(record);\n        }\n        var model = this.model;\n        if (record) {\n            // If the record has the right typeKey attribute set, and Model has type mapping\n            // we hydrate it as the corresponding model\n            var newModel = model.getModelFromRecord(record);\n            if (typeof newModel === 'function') {\n                return new newModel(record);\n            }\n            // If we know that we're hydrating an entity which is not a base one,\n            // we can set it's typeKey attribute as a \"bonus\"\n            if (!this.appliedOnBase) {\n                var typeValue = model.getTypeKeyValueFromModel();\n                if (typeValue !== null) {\n                    record[model.typeKey] = typeValue;\n                }\n            }\n        }\n        return new model(record);\n    };\n    /**\n     * Convert all given records to model instances.\n     */\n    Query.prototype.hydrateMany = function (records) {\n        var _this = this;\n        return Object.keys(records).reduce(function (instances, id) {\n            var record = records[id];\n            instances[id] = _this.hydrate(record);\n            return instances;\n        }, {});\n    };\n    /**\n     * Convert given records to instances by merging existing record. If there's\n     * no existing record, that record will not be included in the result.\n     */\n    Query.prototype.combine = function (records) {\n        var _this = this;\n        return Object.keys(records).reduce(function (instances, id) {\n            var instance = _this.state.data[id];\n            if (!instance) {\n                return instances;\n            }\n            var record = records[id];\n            if (instance.constructor !== _this.model && instance instanceof Model) {\n                instances[id] = _this.hydrate(__assign({}, instance, record), instance.constructor);\n                return instances;\n            }\n            instances[id] = _this.hydrate(__assign({}, instance, record));\n            return instances;\n        }, {});\n    };\n    /**\n     * Convert all given instances to collections.\n     */\n    Query.prototype.map = function (instances) {\n        return Object.keys(instances).map(function (id) { return instances[id]; });\n    };\n    /**\n     * Execute given callback by executing before and after hooks of the specified\n     * method to the given instances. The method name should be something like\n     * `create` or `update`, then it will be converted to `beforeCreate` ,\n     * `afterCreate` and so on.\n     */\n    Query.prototype.commit = function (method, instances, callback) {\n        var name = \"\" + method.charAt(0).toUpperCase() + method.slice(1);\n        this.hook.executeMutationHookOnRecords(\"before\" + name, instances);\n        callback();\n        this.hook.executeMutationHookOnRecords(\"after\" + name, instances);\n    };\n    /**\n     * Clears the current state from any data related to current model:\n     * - everything if not in a inheritance scheme\n     * - only derived instances if applied to a derived entity\n     */\n    Query.prototype.emptyState = function () {\n        if (this.appliedOnBase) {\n            this.state.data = {};\n            return;\n        }\n        for (var id in this.state.data) {\n            if (this.state.data[id] instanceof this.model) {\n                delete this.state.data[id];\n            }\n        }\n    };\n    return Query;\n}());\n\nvar Getters = {\n    /**\n     * Create a new Query instance.\n     */\n    query: function (state, _getters, _rootState, rootGetters) { return function () {\n        return rootGetters[state.$connection + \"/query\"](state.$name);\n    }; },\n    /**\n     * Get all data of given entity.\n     */\n    all: function (state, _getters, _rootState, rootGetters) { return function () {\n        return rootGetters[state.$connection + \"/all\"](state.$name);\n    }; },\n    /**\n     * Find a data of the given entity by given id.\n     */\n    find: function (state, _getters, _rootState, rootGetters) { return function (id) {\n        return rootGetters[state.$connection + \"/find\"](state.$name, id);\n    }; },\n    /**\n     * Find array of data of the given entity by given ids.\n     */\n    findIn: function (state, _getters, _rootState, rootGetters) { return function (idList) {\n        return rootGetters[state.$connection + \"/findIn\"](state.$name, idList);\n    }; }\n};\n\nvar Actions = {\n    /**\n     * Create new data with all fields filled by default values.\n     */\n    new: function (context) {\n        var state = context.state;\n        var entity = state.$name;\n        return context.dispatch(state.$connection + \"/new\", { entity: entity }, { root: true });\n    },\n    /**\n     * Save given data to the store by replacing all existing records in the\n     * store. If you want to save data without replacing existing records,\n     * use the `insert` method instead.\n     */\n    create: function (context, payload) {\n        var state = context.state;\n        var entity = state.$name;\n        return context.dispatch(state.$connection + \"/create\", __assign({}, payload, { entity: entity }), { root: true });\n    },\n    /**\n     * Insert given data to the state. Unlike `create`, this method will not\n     * remove existing data within the state, but it will update the data\n     * with the same primary key.\n     */\n    insert: function (context, payload) {\n        var state = context.state;\n        var entity = state.$name;\n        return context.dispatch(state.$connection + \"/insert\", __assign({}, payload, { entity: entity }), { root: true });\n    },\n    /**\n     * Update data in the store.\n     */\n    update: function (context, payload) {\n        var state = context.state;\n        var entity = state.$name;\n        // If the payload is an array, then the payload should be an array of\n        // data so let's pass the whole payload as data.\n        if (Array.isArray(payload)) {\n            return context.dispatch(state.$connection + \"/update\", { entity: entity, data: payload }, { root: true });\n        }\n        // If the payload doesn't have `data` property, we'll assume that\n        // the user has passed the object as the payload so let's define\n        // the whole payload as a data.\n        if (payload.data === undefined) {\n            return context.dispatch(state.$connection + \"/update\", { entity: entity, data: payload }, { root: true });\n        }\n        // Else destructure the payload and let root action handle it.\n        return context.dispatch(state.$connection + \"/update\", __assign({ entity: entity }, payload), { root: true });\n    },\n    /**\n     * Insert or update given data to the state. Unlike `insert`, this method\n     * will not replace existing data within the state, but it will update only\n     * the submitted data with the same primary key.\n     */\n    insertOrUpdate: function (context, payload) {\n        var state = context.state;\n        var entity = state.$name;\n        return context.dispatch(state.$connection + \"/insertOrUpdate\", __assign({ entity: entity }, payload), { root: true });\n    },\n    /**\n     * Delete data from the store.\n     */\n    delete: function (context, payload) {\n        var state = context.state;\n        var entity = state.$name;\n        var where = typeof payload === 'object' ? payload.where : payload;\n        return context.dispatch(state.$connection + \"/delete\", { entity: entity, where: where }, { root: true });\n    },\n    /**\n     * Delete all data from the store.\n     */\n    deleteAll: function (context) {\n        var state = context.state;\n        var entity = state.$name;\n        return context.dispatch(state.$connection + \"/deleteAll\", { entity: entity }, { root: true });\n    }\n};\n\nvar RootGetters = {\n    /**\n     * Create a new Query instance.\n     */\n    query: function (state) { return function (entity) {\n        return new Query(state, entity);\n    }; },\n    /**\n     * Get all data of given entity.\n     */\n    all: function (state) { return function (entity) {\n        return (new Query(state, entity)).all();\n    }; },\n    /**\n     * Find a data of the given entity by given id.\n     */\n    find: function (state) { return function (entity, id) {\n        return (new Query(state, entity)).find(id);\n    }; },\n    /**\n     * Find a data of the given entity by given id.\n     */\n    findIn: function (state) { return function (entity, idList) {\n        return (new Query(state, entity)).findIn(idList);\n    }; }\n};\n\nvar RootActions = {\n    /**\n     * Create new data with all fields filled by default values.\n     */\n    new: function (context, payload) {\n        var result = { data: {} };\n        context.commit('new', __assign({}, payload, { result: result }));\n        return result.data;\n    },\n    /**\n     * Save given data to the store by replacing all existing records in the\n     * store. If you want to save data without replacing existing records,\n     * use the `insert` method instead.\n     */\n    create: function (context, payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result;\n            return __generator(this, function (_a) {\n                result = { data: {} };\n                context.commit('create', __assign({}, payload, { result: result }));\n                return [2 /*return*/, result.data];\n            });\n        });\n    },\n    /**\n     * Insert given data to the state. Unlike `create`, this method will not\n     * remove existing data within the state, but it will update the data\n     * with the same primary key.\n     */\n    insert: function (context, payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result;\n            return __generator(this, function (_a) {\n                result = { data: {} };\n                context.commit('insert', __assign({}, payload, { result: result }));\n                return [2 /*return*/, result.data];\n            });\n        });\n    },\n    /**\n     * Update data in the store.\n     */\n    update: function (context, payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result;\n            return __generator(this, function (_a) {\n                result = { data: {} };\n                context.commit('update', __assign({}, payload, { result: result }));\n                return [2 /*return*/, result.data];\n            });\n        });\n    },\n    /**\n     * Insert or update given data to the state. Unlike `insert`, this method\n     * will not replace existing data within the state, but it will update only\n     * the submitted data with the same primary key.\n     */\n    insertOrUpdate: function (context, payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result;\n            return __generator(this, function (_a) {\n                result = { data: {} };\n                context.commit('insertOrUpdate', __assign({}, payload, { result: result }));\n                return [2 /*return*/, result.data];\n            });\n        });\n    },\n    /**\n     * Delete data from the store.\n     */\n    delete: function (context, payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result;\n            return __generator(this, function (_a) {\n                result = { data: {} };\n                context.commit('delete', __assign({}, payload, { result: result }));\n                return [2 /*return*/, result.data];\n            });\n        });\n    },\n    /**\n     * Delete all data from the store.\n     */\n    deleteAll: function (context, payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (payload && payload.entity) {\n                    context.commit('deleteAll', { entity: payload.entity });\n                    return [2 /*return*/];\n                }\n                context.commit('deleteAll');\n                return [2 /*return*/];\n            });\n        });\n    }\n};\n\nvar OptionsBuilder = /** @class */ (function () {\n    function OptionsBuilder() {\n    }\n    /**\n     * Get persist options from the given payload.\n     */\n    OptionsBuilder.createPersistOptions = function (payload) {\n        return {\n            create: payload.create,\n            insert: payload.insert,\n            update: payload.update,\n            insertOrUpdate: payload.insertOrUpdate\n        };\n    };\n    return OptionsBuilder;\n}());\n\nvar RootMutations = {\n    /**\n     * Execute generic mutation. This method is used by `Model.commit` method so\n     * that user can commit any state changes easily through models.\n     */\n    $mutate: function (state, payload) {\n        payload.callback(state[payload.entity]);\n    },\n    /**\n     * Create new data with all fields filled by default values.\n     */\n    new: function (state, payload) {\n        var entity = payload.entity;\n        var result = payload.result;\n        result.data = (new Query(state, entity)).new();\n    },\n    /**\n     * Save given data to the store by replacing all existing records in the\n     * store. If you want to save data without replacing existing records,\n     * use the `insert` method instead.\n     */\n    create: function (state, payload) {\n        var entity = payload.entity;\n        var data = payload.data;\n        var options = OptionsBuilder.createPersistOptions(payload);\n        var result = payload.result;\n        result.data = (new Query(state, entity)).create(data, options);\n    },\n    /**\n     * Insert given data to the state. Unlike `create`, this method will not\n     * remove existing data within the state, but it will update the data\n     * with the same primary key.\n     */\n    insert: function (state, payload) {\n        var entity = payload.entity;\n        var data = payload.data;\n        var options = OptionsBuilder.createPersistOptions(payload);\n        var result = payload.result;\n        result.data = (new Query(state, entity)).insert(data, options);\n    },\n    /**\n     * Update data in the store.\n     */\n    update: function (state, payload) {\n        var entity = payload.entity;\n        var data = payload.data;\n        var where = payload.where || null;\n        var options = OptionsBuilder.createPersistOptions(payload);\n        var result = payload.result;\n        result.data = (new Query(state, entity)).update(data, where, options);\n    },\n    /**\n     * Insert or update given data to the state. Unlike `insert`, this method\n     * will not replace existing data within the state, but it will update only\n     * the submitted data with the same primary key.\n     */\n    insertOrUpdate: function (state, payload) {\n        var entity = payload.entity;\n        var data = payload.data;\n        var options = OptionsBuilder.createPersistOptions(payload);\n        var result = payload.result;\n        result.data = (new Query(state, entity)).insertOrUpdate(data, options);\n    },\n    /**\n     * Delete data from the store.\n     */\n    delete: function (state, payload) {\n        var entity = payload.entity;\n        var where = payload.where;\n        var result = payload.result;\n        result.data = (new Query(state, entity)).delete(where);\n    },\n    /**\n     * Delete all data from the store.\n     */\n    deleteAll: function (state, payload) {\n        if (payload && payload.entity) {\n            (new Query(state, payload.entity)).deleteAll();\n            return;\n        }\n        Query.deleteAll(state);\n    }\n};\n\nfunction use (plugin, options) {\n    if (options === void 0) { options = {}; }\n    var components = {\n        Model: Model,\n        Query: Query,\n        Attribute: Attribute,\n        Type: Type,\n        Attr: Attr,\n        String: String$1,\n        Number: Number,\n        Boolean: Boolean,\n        Increment: Increment,\n        Relation: Relation,\n        HasOne: HasOne,\n        BelongsTo: BelongsTo,\n        HasMany: HasMany,\n        HasManyBy: HasManyBy,\n        BelongsToMany: BelongsToMany,\n        HasManyThrough: HasManyThrough,\n        MorphTo: MorphTo,\n        MorphOne: MorphOne,\n        MorphMany: MorphMany,\n        MorphToMany: MorphToMany,\n        MorphedByMany: MorphedByMany,\n        Getters: Getters,\n        Actions: Actions,\n        RootGetters: RootGetters,\n        RootActions: RootActions,\n        RootMutations: RootMutations\n    };\n    plugin.install(components, options);\n}\n\nvar IdAttribute = /** @class */ (function () {\n    function IdAttribute() {\n    }\n    /**\n     * Create the id attribute.\n     */\n    IdAttribute.create = function (model) {\n        return function (value, _parent, _key) {\n            var id = model.id(value);\n            return id === undefined || id === null || id === '' ? NoKey.get() : id;\n        };\n    };\n    return IdAttribute;\n}());\n\nvar ProcessStrategy = /** @class */ (function () {\n    function ProcessStrategy() {\n    }\n    /**\n     * Create the process strategy.\n     */\n    ProcessStrategy.create = function (model) {\n        var _this = this;\n        return function (value, _parentValue, _key) {\n            var id = _this.getId(model, value);\n            return __assign({}, value, { $id: id });\n        };\n    };\n    /**\n     * Get the ID value for the given record.\n     */\n    ProcessStrategy.getId = function (model, value) {\n        var id = model.id(value);\n        return id === undefined || id === null || id === '' ? NoKey.increment() : id;\n    };\n    return ProcessStrategy;\n}());\n\nvar Schema = /** @class */ (function () {\n    /**\n     * Create a new schema instance.\n     */\n    function Schema(model) {\n        var _this = this;\n        /**\n         * List of generated schemas.\n         */\n        this.schemas = {};\n        this.model = model;\n        var models = model.database().models();\n        Object.keys(models).forEach(function (name) { _this.one(models[name]); });\n    }\n    /**\n     * Create a schema for the given model.\n     */\n    Schema.create = function (model) {\n        return (new this(model)).one();\n    };\n    /**\n     * Create a single schema for the given model.\n     */\n    Schema.prototype.one = function (model) {\n        model = model || this.model;\n        if (this.schemas[model.entity]) {\n            return this.schemas[model.entity];\n        }\n        var schema$1 = new schema.Entity(model.entity, {}, {\n            idAttribute: IdAttribute.create(model),\n            processStrategy: ProcessStrategy.create(model)\n        });\n        this.schemas[model.entity] = schema$1;\n        var definition = this.definition(model);\n        schema$1.define(definition);\n        return schema$1;\n    };\n    /**\n     * Create an array schema for the given model.\n     */\n    Schema.prototype.many = function (model) {\n        return new schema.Array(this.one(model));\n    };\n    /**\n     * Create an union schema for the given model.\n     */\n    Schema.prototype.union = function (callback) {\n        return new schema.Union(this.schemas, callback);\n    };\n    /**\n     * Create a dfinition for the given model.\n     */\n    Schema.prototype.definition = function (model) {\n        var _this = this;\n        var fields = model.fields();\n        return Object.keys(fields).reduce(function (definition, key) {\n            var field = fields[key];\n            if (field instanceof Relation) {\n                definition[key] = field.define(_this);\n            }\n            return definition;\n        }, {});\n    };\n    return Schema;\n}());\n\nvar Builder = /** @class */ (function () {\n    function Builder() {\n    }\n    /**\n     * Create module from the given modules.\n     */\n    Builder.create = function (namespace, models, modules) {\n        var tree = {\n            namespaced: true,\n            state: { $name: namespace },\n            getters: RootGetters,\n            actions: RootActions,\n            mutations: RootMutations,\n            modules: {}\n        };\n        return this.createModules(tree, namespace, models, modules);\n    };\n    /**\n     * Creates module tree to be registered under top level module\n     * from the given entities.\n     */\n    Builder.createModules = function (tree, namespace, models, modules) {\n        var _this = this;\n        Object.keys(modules).forEach(function (name) {\n            var model = models[name];\n            var module = modules[name];\n            tree.modules[name] = { namespaced: true };\n            tree.modules[name].state = _this.createState(namespace, name, model, module);\n            tree.getters[name] = function (_state, getters, _rootState, _rootGetters) { return function () {\n                return getters.query(name);\n            }; };\n            tree.modules[name].getters = __assign({}, Getters, module.getters);\n            tree.modules[name].actions = __assign({}, Actions, module.actions);\n            tree.modules[name].mutations = module.mutations || {};\n        });\n        return tree;\n    };\n    /**\n     * Get new state to be registered to the modules.\n     */\n    Builder.createState = function (namespace, name, model, module) {\n        var modelState = typeof model.state === 'function' ? model.state() : model.state;\n        var moduleState = typeof module.state === 'function' ? module.state() : module.state;\n        return __assign({}, modelState, moduleState, { $connection: namespace, $name: name, data: {} });\n    };\n    return Builder;\n}());\n\nvar Database = /** @class */ (function () {\n    function Database() {\n        /**\n         * The list of entities to be registered to the Vuex Store. It contains\n         * models and modules with its name.\n         */\n        this.entities = [];\n        /**\n         * The database schema definition. This schema will be used when normalizing\n         * the data before persisting them to the Vuex Store.\n         */\n        this.schemas = {};\n    }\n    /**\n     * Initialize the database before a user can start using it.\n     */\n    Database.prototype.start = function (store, namespace) {\n        this.store = store;\n        this.namespace = namespace;\n        this.registerModules();\n        this.createSchema();\n    };\n    /**\n     * Register a model and a module to Database.\n     */\n    Database.prototype.register = function (model, module) {\n        if (module === void 0) { module = {}; }\n        if (model.baseEntity) {\n            var base = this.model(model.baseEntity);\n            if (base && base.types === Model.types && process.env.NODE_ENV !== 'production') {\n                console.warn(\"Model \" + model.name + \" extends \" + base.name + \" which doesn't overwrite Model.types(). You will not be able to use type mapping.\");\n            }\n        }\n        this.entities.push({\n            name: model.entity,\n            base: model.baseEntity || model.entity,\n            model: model,\n            module: module\n        });\n    };\n    /**\n     * Get the model of the given name from the entities list.\n     */\n    Database.prototype.model = function (name) {\n        return this.models()[name];\n    };\n    /**\n     * Get base model of given name from the entities list.\n     */\n    Database.prototype.baseModel = function (name) {\n        return this.baseModels()[name];\n    };\n    /**\n     * Get all models from the entities list.\n     */\n    Database.prototype.models = function () {\n        return this.entities.reduce(function (models, entity) {\n            models[entity.name] = entity.model;\n            return models;\n        }, {});\n    };\n    /**\n     * Get all base model from the entities list.\n     */\n    Database.prototype.baseModels = function () {\n        var _this = this;\n        return this.entities.reduce(function (models, entity) {\n            models[entity.name] = _this.model(entity.base);\n            return models;\n        }, {});\n    };\n    /**\n     * Get the module of the given name from the entities list.\n     */\n    Database.prototype.module = function (name) {\n        return this.modules()[name];\n    };\n    /**\n     * Get all modules from the entities list.\n     */\n    Database.prototype.modules = function () {\n        return this.entities.reduce(function (modules, entity) {\n            modules[entity.name] = entity.module;\n            return modules;\n        }, {});\n    };\n    /**\n     * Create the Vuex Module from registered entities.\n     */\n    Database.prototype.registerModules = function () {\n        var modules = Builder.create(this.namespace, this.models(), this.modules());\n        this.store.registerModule(this.namespace, modules);\n    };\n    /**\n     * Create the schema definition from registered entities list and set\n     * it to the property. This schema will be used by the normalizer\n     * to normalize data before persisting them to the Vuex Store.\n     */\n    Database.prototype.createSchema = function () {\n        var _this = this;\n        this.entities.forEach(function (entity) {\n            _this.schemas[entity.name] = Schema.create(entity.model);\n        });\n    };\n    return Database;\n}());\n\nvar index = {\n    install: install,\n    use: use,\n    Database: Database,\n    Model: Model,\n    Query: Query,\n    Attribute: Attribute,\n    Type: Type,\n    Attr: Attr,\n    String: String$1,\n    Number: Number,\n    Boolean: Boolean,\n    Increment: Increment,\n    Relation: Relation,\n    HasOne: HasOne,\n    BelongsTo: BelongsTo,\n    HasMany: HasMany,\n    HasManyBy: HasManyBy,\n    BelongsToMany: BelongsToMany,\n    HasManyThrough: HasManyThrough,\n    MorphTo: MorphTo,\n    MorphOne: MorphOne,\n    MorphMany: MorphMany,\n    MorphToMany: MorphToMany,\n    MorphedByMany: MorphedByMany,\n    Getters: Getters,\n    Actions: Actions,\n    RootGetters: RootGetters,\n    RootActions: RootActions,\n    RootMutations: RootMutations\n};\n\nexport default index;\nexport { Actions, Attr, Attribute, BelongsTo, BelongsToMany, Boolean, Database, Getters, HasMany, HasManyBy, HasManyThrough, HasOne, Increment, Model, MorphMany, MorphOne, MorphTo, MorphToMany, MorphedByMany, Number, Query, Relation, RootActions, RootGetters, RootMutations, String$1 as String, Type, install, use };\n","import { Model } from '@vuex-orm/core';\n\nexport default class Item extends Model {\n  static entity = 'items';\n\n  static fields() {\n    return{\n      id: this.increment\n    }\n  }\n}","import Item from './Item';\n\nexport {\n  Item\n}","import './setPublicPath'\nexport * from '~entry'\n"],"sourceRoot":""}